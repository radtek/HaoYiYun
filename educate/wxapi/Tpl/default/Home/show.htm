<html lang="zh-CN">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="/wxapi/public/css/video-js.css" rel="stylesheet" type="text/css" />
  <!-- If you'd like to support IE8 -->
  <script src='/wxapi/public/js/videojs-ie8.min.js'></script>
  <!-- PC端还是使用videojs的5.18.4，为了兼容IE8界面 -->
  <script src="/wxapi/public/js/jquery-1.12.4.min.js"></script>
  <script src="/wxapi/public/js/video.min.js"></script>
  <script src="/wxapi/public/js/zh-CN.js"></script>
  <!-- 不是IE浏览器，才引入flvjs和hls的支持 -->
  <eq name='my_isIE' value='0'>
  <script src="/wxapi/public/js/videojs-contrib-hls.min.js"></script>
  <script src="/wxapi/public/js/flv.min.js"></script>
  <script src="/wxapi/public/js/videojs-flvjs.min.js"></script>
  </eq>
</head>
<style>
.video-js {
  width: {{$my_show.width}}px;
  height: {{$my_show.height}}px;
}
</style>
<body style="margin: 0px 0px;">
<div id="my-player">
  <video id="my-video" class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto" data-setup="{}">
    <!--<source src="http://192.168.1.131/263232.mp4" type="video/mp4"></source>-->
    <!--<source src="rtmp://192.168.1.131:1935/live/live1" type="rtmp/flv"></source>-->
    <!--<source src="http://192.168.1.180:8080/live/live1.m3u8" type="application/x-mpegURL"></source>-->
    <p class="vjs-no-js">要播放该视频请开启 JavaScript ，并升级浏览器<a href="http://videojs.com/html5-video-support/" target="_blank">支持 HTML5 视频</a></p>
  </video>
</div>
<!-- body里的script需要页面加载完毕，head里的script可以不用等页面加载完就执行 -->
<script type="text/javascript">
// 获取网站地址...
var g_isIEBrowser = {{$my_isIE}};
var g_siteurl = "{{:__APP__}}";
// 初始化直播通知需要的变量...
// g_player_id     => 大于0的编号...
// g_player_vod    => 0(直播), 1(点播)...
// g_player_type   => 0(Flash), 1(HTML5)...
// g_player_camera => 通道编号 => rtmp_live
// g_player_active => 0(停止), 1(有效)...
var g_player_id = {{$my_show.player_id}};
var g_player_vod = {{$my_show.player_vod}};
var g_player_camera = {{$my_show.player_camera}};
var g_player_type = 0;
var g_player_clock = -1;
// 直接修改父窗口的点击播放次数 => 点播和直播的处理不相同，需要区分一下...
if( typeof(window.parent.doClicks) == "function" ) {
  window.parent.doClicks('{{$my_show.click_id}}', {{$my_show.clicks}}, g_player_vod);
}
// 直播状态通知接口 => inPlayActive不能用true或false，必须用1或0...
function doLivePlayVerify(inCamera, inPlayID, inPlayType, inPlayActive) {
  // 通过ajax发送异步消息命令给转发服务器...
  $.ajax({
    type: "post",
    async: true,
    url: g_siteurl+"/RTMP/verify",
    data: {rtmp_live: inCamera, player_id: inPlayID, player_type: inPlayType, player_active: inPlayActive},
    success: function(ajaxData) {
      // 解析反馈的json数据内容...
      var arrJson = $.parseJSON(ajaxData);
      // 打印错误信息，关闭定时器...
      if( arrJson.err_code > 0 ) {
        ((!g_isIEBrowser) ? console.log('verify error => ' + arrJson.err_msg) : 0);
        clearInterval(g_player_clock);
        return;
      }
      // 打印成功信息...
      if( !g_isIEBrowser ) {
        console.log('verify success => player_camera: %d, player_id: %d, player_type: %d, player_active: %d', inCamera, inPlayID, inPlayType, inPlayActive);
      }
    },
    error: function(XMLHttpRequest, textStatus, errorThrown) {
      if( !g_isIEBrowser ) {
        console.log('verify error => ' + textStatus+': '+XMLHttpRequest.status+','+errorThrown);
      }
      clearInterval(g_player_clock);
    }
  });
}

$(document).ready( function () {
  // 初始化videojs对象 => 直接设置多个源，让videojs自动匹配...
  var strTech = '{{$my_show.tech}}';
  var arrTech = $.parseJSON(strTech);
  var strSource = '{{$my_show.source}}';
  var arrSource = $.parseJSON(strSource);
  // 如果是点播文件，并且父窗口的接口有效，修改父窗口的下载地址...
  if( typeof(window.parent.doDownLoadUrl) == "function" ) {
    window.parent.doDownLoadUrl(g_player_vod, {{$my_show.record_id}});
  }
  // 如果不是IE浏览器，并且是直播，看看是否支持flvjs...
  if( !g_isIEBrowser && g_player_vod <= 0 ) {
    var theSupport = flvjs.isSupported();
    // 如果不支持flvjs，删除tech和source里的第一个元素...
    if( theSupport == 'undefined' || !theSupport ) {
      delete arrTech[0]; delete arrSource[0];
    } else {
      // 如果是safari浏览器，10以下版本仍然不支持mse的flvjs功能...
      var userAgent = navigator.userAgent.toLowerCase();
      var rSafari = /version\/([\w.]+).*(safari)/;
      var uaMatch = rSafari.exec(userAgent);
      // 如果是 Safari 10 以下版本，删除对flvjs的支持...
      if((uaMatch != null) && (uaMatch[1].split('.')[0] < 10)) {
        delete arrTech[0]; delete arrSource[0];
      }
    }
  }
  // 2017.12.08 => 发现videojs重复初始化会报错，需要先删除老的player...
  // 先检测一下是否已经有player，有的话设置特定参数，否则会出错...
  var theOldPlayer = videojs.getPlayers()["my-video"];
  if( theOldPlayer ) {
    // 调用接口释放videojs对象，它连video标签一起删除...
    theOldPlayer.dispose();
    // 动态新建一个video标签...
    var theVideo = document.createElement('video');
    // 设置新标签的controls、ID标记、样式风格，与页面设置的保持一致...
    theVideo.className = "video-js vjs-default-skin vjs-big-play-centered";
    theVideo.controls = true;
    theVideo.preload = "auto";
    theVideo.id = "my-video";
    // 将新建标签追加到指定的div下面...
    $('#my-player').append(theVideo);
    console.log('== videojs player has been recreated ==');
  }
  // 用video标签创建videojs对象...
  var player = videojs("my-video", {
    width: "{{$my_show.width}}",
    height: "{{$my_show.height}}",
    sources: arrSource,
    techOrder: arrTech,
    html5: { hls: {withCredentials: false} },
    flash: { swf: "/wxapi/public/js/video-js.swf" },
    controlBar: { currentTimeDisplay: true, audioTrackButton: false }
  });
  // 播放器ready事件...
  player.ready( function() {
    // 注册结束事件，调用父窗口的接口...
    this.on('ended', function() {
      // 父窗口有这个函数才执行，没有，则跳过，不执行...
      if( typeof(window.parent.doEndedEvent) == "function" ) {
        window.parent.doEndedEvent();
      }
    });
    // 获取播放器编号，播放器类型，是否有效...
    // 注意：flvjs也被归为html5播放器...
    ((!g_isIEBrowser) ? console.log('[techName] > %s', this.techName_) : 0);
    g_player_type = ((this.techName_.toLowerCase() == 'flash') ? 0 : 1);
    // 如果是点播，直接播放返回...
    if( g_player_vod ) {
      this.play();
      return;
    }
    // 如果是直播的处理过程...
    // g_player_type => 0 => flash player...
    // g_player_type => 1 => html5 player...
    // 所有播放器，都需要设置超时汇报事件，每隔12秒调用父窗口的ajax通知接口...
    g_player_clock = setInterval(function() {
      doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 1);
    }, 12000);
    // IE8 好像无法执行到onunload事件，只能超时退出...
    // 设置窗口关闭事件，通知中转服务器，播放器关闭...
    window.onunload = function() {
      clearInterval(g_player_clock);
      doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 0);
    };
    // 然后，直接播放...
    this.play();
  });
  // 针对Html5模式下的双击全屏事件，Flash模式下不起作用...
  //player.on(player.tech_, 'dblclick', doubleClick);
  player.on('dblclick', function(event) {
    var doc = document;
    var pEl = this.el();
    // When controls are disabled, hotkeys will be disabled as well
    if (this.controls()) {
      // Don't catch clicks if any control buttons are focused
      var activeEl = event.relatedTarget || event.toElement || doc.activeElement;
      if (activeEl == pEl || activeEl == pEl.querySelector('.vjs-tech') || activeEl == pEl.querySelector('.iframeblocker')) {
        if (this.isFullscreen()) {
          this.exitFullscreen();
        } else {
          this.requestFullscreen();
        }
      }
    }
  });
  // 播放器播放错误...
  player.on('error', function() {
    // 打印错误信息...
    ((!g_isIEBrowser) ? console.log('player Error!') : 0);
    // 如果是直播，关闭定时器，并通知中转服务器...
    if( g_player_vod <= 0 ) {
      clearInterval(g_player_clock);
      doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 0);
    }
  });
  // 播放器播放结束...
  player.on('ended', function() {
    // 打印结束信息...
    ((!g_isIEBrowser) ? console.log('player ended!') : 0);
    // 如果是直播，关闭定时器，并通知中转服务器...
    if( g_player_vod <= 0 ) {
      clearInterval(g_player_clock);
      doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 0);
    }
  });
  // 播放器确认能够播放...
  player.on('canplay', function() {
    ((!g_isIEBrowser) ? console.log('player Canplay!') : 0);
  });
  // 播放器无需停顿直接播放...
  player.on('canplaythrough', function() {
    ((!g_isIEBrowser) ? console.log('player Canplaythrough!') : 0);
  });
});
</script>
</body>
</html>