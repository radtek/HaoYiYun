
2017.11.16
=========================================================================
1. 向 github 完成了一次提交工作；

2017.10.25
=========================================================================
0.（已放弃）网站端：通过网站端可以查看各个部件的日志信息，通过 http 协议读取日志文件，在浏览器端查看，便于快速排查问题。
   X：（已放弃）实现起来太麻烦，而且当模块分离时，各个组件的读取有会产生不确定因素，造成开发难度，又得不偿失；
   A：（未完成）PHP   => /weike/php/logs/fastdfs.log
                         /weike/php/logs/php-fpm.log
                         /weike/php/logs/slow.log
   B：（未完成）MySQL => /weike/mysql/logs/mysql_error.log
   C：（未完成）Nginx => /weike/nginx/logs/access.log
   			 /weike/nginx/logs/error.log
   D：（未完成）transmit => /weike/transmit/transmit.log
   E：（未完成）tracker  => /fdfs/tracker/logs/trackerd.log
   F：（未完成）storage  => /fdfs/storage/logs/storaged.log
   G：（未完成）srs      => /weike/srs/logs/srs.log
5.（未完成）网站端：直播服务器的状态信息可以通过1985端口的API接口来获取呈现，便于快速定位服务器状态。streams | clients 接口最有用。https://github.com/ossrs/srs/wiki/v2_CN_HTTPApi
6.（未完成）网站端：存储服务器的状态信息可以通过php扩展调用接口获取。
7.（未完成）https://ihaoyi.cn => 未来的单独运营的节点网站，企业、机关、学校，可以租用云服务的方式，获得浩一云服务，针对它会有单独的运营小程序；小程序名：浩一云
9.（未完成）采集端：在GitHub上的EasyPlayer团队，好像能够支持多种摄像头协议，包括水滴摄像头，采集端需要支持更多的摄像头类型，需要参考；
10.（未完成）小程序只能跟 myhaoyi.com 通讯；小程序的所有功能都是围绕管理和统计进行；
11.（未完成）小程序：可以管理采集端、摄像头、网站等等信息，简洁大方，快速上线，需要在 myhaoyi.com 上编写中转服务器 wxsmit，进行命令中转；
12.（未完成）小程序：小程序的支持路径需要想清楚，所有的数据都必须通过 https://myhaoyi.com 中转，需要在 myhaoyi.com 上安装 wxsmit ，用于小程序命令中转；
13.（未完成）IPC：如果有多个支持 rtsp 的摄像头，可以通过 upnp 或 onvif 协议，自动获取，然后添加，代替组播自动搜索协议，应用更广泛；
14.（未完成）摄像头：需要提供一种摄像头直接推流的方案，支持摄像头直接推rtsp或rtmp流，目前的采集端只支持拉流方案；
15.（未完成）网站宣传中，需要突出按需上传的特点，有很好的实际应用场景，现在已经有了2个实际应用场景：
    A：16个校区，每个校区20个摄像头，数据汇聚到云端，总部通过云端观看；不可能将320路全部同时上传到云端，带宽费用高昂，按需上传可以大大节约带宽费用；
    B：20个风力发电厂，每个风厂20个风机，每个风机3个摄像头，数据汇聚到云端，总部通过云端观看；不可能将1200路全部同时上传到云端，按需上传可以大大节约带宽费用；
17.（未完成）网站后端：在点播管理页面，节目预览时，可以直接点击播放；
   A：（未完成）需要对videojs的界面与响应做进一步的深入分析，可以自由控制；
   B：（未完成）需要对videojs在移动端的表现形式做深入分析，可以在手机端自由呈现；
4.（未完成）网站后端：可以设置黑名单或白名单模式，设定哪些直播，或哪些视频可以对外观看；
   A：（未完成）可以将采集端与微信帐号绑定，微信用户登录网站自行设定观看授权方式的进行；
   B：（未完成）每个微信登录用户，可以管理自己的采集端，是否公开采集端或公开采集端下的某些通道；（后台可以设定采集端是否公开，一旦关闭，所有通道不可见）
   C：（未完成）其它未登录用户，可以观看已公开的采集端或已公开的通道；一旦通道公开，通道下录像也会公开；（后台可以设定通道是否公开，一旦关闭，所有录像不可见）
   D：（未完成）小程序有关通道的管理，同样遵循以上规则同时，还可以新增一条规则：对于非公开的通道，所有者可以通过分享的方式，半公开给其它用户，其它用户可以通过分享入口进去观看（后台也可以设定是否开启这个观看权限，也就是说可以随时关闭）
19.（未完成）采集端需要与一个微信账户绑定，普通用户也能登录网站后台，专门管理与自己相关的采集端；管理员就是目前的管理所有配置的页面；
   A：（未完成）普通用户：管理与自己绑定的采集端配置，可以控制通道的添加、删除、修改、启动、停止；
   B：（未完成）管理用户：可以管理所有的采集端，所有的网站配置信息；
   C：（未完成）这样，一下子解决了普通用户的管理权限问题；
   D：（未完成）微信小程序，为了简化，只能管理与自己绑定的采集端，不要添加复杂的网站配置；
   E：（未完成）普通用户，可以管理多个采集端，都是通过微信扫码绑定；
   F：（未完成）一个采集端只能绑定一个微信用户，采集端拥有者可以解除绑定；
   G：（未完成）云录播、云监控属性赋给这个用户，这个用户管理的所有的采集端显示时呈现对应的属性；
20.（未完成）网站后台，只有一种模式，云服务模式，不要把业务教学逻辑加入系统；
   A：（未完成）浩一云，是一个底层的视频云平台，只跟一些基础数据打交道，对外提供API，复杂数据由第三方去呈现；
   B：（未完成）网站端的呈现逻辑暂时不要再去更新迭代了，只是做好已删除通道的处理就行了；
   C：（未完成）第三方集成商的应用是千变万化的，这一点必须明确，只能根据第三方的需求，跟它磨合；
   D：（未完成）基于微信小程序的互联网的监控巡查需求是清晰明确的，可以完全自己进行反复迭代的，
22.（未完成）网站后端：通道删除时，录像记录的删除操作。
   A：（未完成）正确的做法是：做删除标记，用任务去慢慢删除，这样不影响主流程；
   B：（未完成）数据库中设置删除标记，让swoole再去慢慢删除，不影响主进程的使用；
23.（未完成）网站后端：对录像删除的进一步思考：
   A：（未完成）需要将每一个采集端与微信帐号绑定，采集端被认领之后，才能在网站和移动端显示出来；
   B：（未完成）每个微信帐号会被分配一定的授权存储空间，采集端在录像时会判断这个录像空间是否够用，不够用，会自动删除老的录像腾出空间；
   C：（未完成）中心网站不负责分配用户的授权存储空间配置，交给节点网站自己去配置，中心网站只授权采集端的授权使用时间；
   D：（未完成）ihaoyi.cn相当于一个节点网站，它上面可以针对每个微信用户进行存储空间授权，自动回滚删除等等操作；
   E：（未完成）删除通道，不要删除通道下的录像，应该让录像模块自己回滚，这样可以避免用户误删除录像数据，造成损失，也就是说通道没了，录像还在，让新录像数据根据已授权的存储空间，去覆盖老的录像数据；
24.（未完成）网站后端，每个网站端都需要一个唯一授权码，拿到授权码才能进行API访问；
   A：（未完成）这个可以参考一些API的设计 => http://easynvr.easydarwin.org/
25.（未完成）可以针对实现已经实现ONVIF协议的IPC，直接进行云台操作，摄像头配置；目前是通过海康的SDK进行的；
27.（未完成）采集端可以新增一个功能：可以实时动态转码，以便降低分辨率和码流，达到流畅直播的目的；可以通过外接一个转码模块实现，调用ffmpeg的SDK；
28.（未完成）采集端可以配置成，在下班之后上传，而不是录像完毕之后就上传，避免上传拥堵；
29.（未完成）HLS观看端，汇报周期可以配置，默认12秒汇报一次，最低10秒汇报一次；10秒~60秒
30.（未完成）需要在网站后台，新增“API接口”栏目，用于API的直接测试使用，可以代替帮助文档；
31.（未完成）需要在网站后台，新增“升级服务”栏目，比对当前版本与服务器版本的差异，显示升级报告，单个文件升级或整个升级；主要针对网站和数据库升级；
   A：（未完成）升级服务当中，可以新增一个查看日志的功能；
   B：（未完成）升级服务当中，可以新增一个删除缓存的功能；因为数据库或php更新后，可能会造成字段或页面显示问题；
32.（未完成）采集端需要提供32位和64位编译的版本；
35.（未完成）采集端的所有配置都放到myhaoyi.com当中，默认都是浩一科技，在OEM授权之后，每次启动都从myhaoyi.com读取OEM配置；
   A：（未完成）这是非核心功能，暂缓执行；如果发生总是无法写入Config.xml的情况，就需要提前实现这个功能；
   B：（未完成）仔细分析这个功能，实现起来还有点麻烦，牵涉到中心网站的授权问题；实现之后的意义也不是很大，暂时搁置；
34.（已完成）获取用户登录时的unionid的方法：
   A：（已完成）http://blog.csdn.net/qq_38316918/article/details/78343128 和 http://www.jianshu.com/p/bb1ed9512dd1
   B：（已完成）具体应用过程写在了MiniAction.class.php当中；
35.（未完成）获取小程序二维码的方法：
   A：（已完成）参考测试代码 monitor/wxapi/Lib/Action/GatherAction.class.php 里的 qrcode() 函数
36.（未完成）目前核心的三大块重要工作：
   A：（未完成）完成小程序的第一版本工作，建立起微信账户与采集端的关联关系结构；
   B：（未完成）完成API的接口设计，加入到网站后台当中，用户登录就能测试使用；
   C：（未完成）完成所有重要功能的文档说明，编制文章，有结构有调理的文章，相当于在线使用帮助；
   D：（未完成）完成网站通过后台，使用swoole完成自动同步升级的功能，而且不用等待，在后台运行；
   E：（未完成）现在需要根据目前的小程序界面设计，找到需要的界面组件库，完成第一步工作；


27.（未完成）采集端，摄像头通道，突然断开时，通道并没有立即反馈状态，还是直播中；

28.（未完成）中转端，某通道上的播放器为0时，转发命令给采集端，会因为网络原因，无法到达采集端，造成采集端一直在上传已经停止的通道；
   A：（未完成）跟transmit造成采集端假死的情况，综合起来考虑，应该让采集端每隔2分钟，查询正在上传的直播通道的用户数；
   B：（未完成）transmit可以根据采集端是否汇报，来判断超时，采集端又可以根据transmit反馈来确认正在上传的通道是否还要继续上传；
29.（未完成）在公网上会发生很多异常的情况，特别是transmit里面会发生假死的情况：
   A：（未完成）transmit目前的处理方式是 gettcpstate ，但还是会发生假死的情况；
   B：（未完成）后来发现，不是超时干掉假死连接，而是ForRead错误干掉的，在过了一段时间之后，应该是系统底层发出的删除指令；
   C：（未完成）因此，最好的办法是在网站后台，组件管理 => 中转客户端，可以手动删除列出的终端列表；
   D：（未完成）组件管理 => 中转客户端，存在没有列举完所有终端的问题，需要改进；

30.（未完成）在寻找演示视频的时候发现jwplayer的演示栏有很多值得参考的东西：
   A：（未完成）要做一些全方位的展示功能，参考jwplayer的操作方式去实现；
   B：（未完成）全部演示 => https://developer.jwplayer.com/jw-player/demos/
   C：（未完成）电视墙   => https://developer.jwplayer.com/jw-player/demos/innovation/click-to-play/

37.（已完成）小程序第一版的核心架构的搭建，主要是样式：
   A：（已完成）小程序能够已myhaoyi.com为中心，管理多个节点下面的多个采集端，并能够通过一个小程序观看通道的截图、通道的直播、通道的点播；
   B：（已完成）通过完成‘共享通道’这个页面来进行实验，看看能否实现从myhaoyi.com管理多个节点下的采集端，并实现点播、直播、截图的显示；
   C：（已完成）首先，需要完成共享通道的页面设计工作，尽量使用现有的模版和页面样式；
   D：（已完成）"enablePullDownRefresh": true => Boolean，不是String，设置成 "true"，会导致手机上无法显示下拉刷新；其它地方又可以String与Boolean混用没事！
   E：（已完成）小程序的样式被固定在了组件当中，相对使用起来比较方便，样式也比较固定，没有太多特殊的东西，完成了通道页面的初步搭建；
   F：（已完成）开始完整逻辑的搭建，还是从共享通道入手，进行完整与微信帐号绑定的社交逻辑的测试；
   G：（已完成）已经在ios和android测试通过 .m3u8 可以直接在小程序当中播放，在PC开发工具中不能播放 .m3u8 文件；
   H：（已完成）为了不让页面抖动跳跃，将所有有关视频的页面都统一设置成210px，注意没有使用rpx；
   I：（已完成）暂时不要使用scroll-view，它需要设置一个固定的高度，同时，小程序动态选择对象非常不方便，再加上滑动体验不佳，还是使用原生的view处理；
   J：（未完成）在我的通道当中，需要新增共享操作，以便将拥有的采集端通道共享出来，具体操作是新建一条记录到wk_track当中；只有拥有者才能共享通道；
   K：（已完成）为了便于定位，需要在中心节点的wk_track表中，新增user_id字段，用于快速定位共享通道的用户信息；需要给wk_track建立一个信息视图；；
   M：（已完成）需要在myhaoyi.com的wk_node当中，新增字段node_wan，是否是互联网节点，默认0，在网站登录和采集端注册时验证更新到数据库当中；
   N：（已完成）发现一个Bug，采集端在汇报时和节点汇报时，在myhaoyi.com上产生的效果不一致，需要统一起来，需要新增一个字段node_proto，用来保存节点的协议类型；云录播、云监控、采集端、中心服务器，全部都要同步修改；
   O：（已完成）为了调试小程序，必须在公网上搭建节点环境，才能正常测试，将云录播和云监控同时搭建起来；
      1：（已完成）将数据库更新完毕，云录播haoyi，云监控monitor；
      2：（已完成）将数据库更新到公网上，将网站更新到公网上；
      3：（已完成）将transmit、srs更新到公网上；
      4：（已完成）将中心服务器的数据库进行了规范处理：
          https://myhaoyi.com => center => 中心数据库 => /weike/htdocs
          http://ihaoyi.cn => monitor => 云监控数据库 => /weike/monitor
          http://demo.myhaoyi.com => haoyi => 云录播数据库 => /weike/demo
      5：（已完成）以后的系统调试，都尽量使用公网调试，尽量不用内网调试；
      6：（已完成）节点网站不能用https模式，存在https与http混用问题，会造成flvjs与hls的直播无法观看，只能用rtmp观看；因此，节点网站都用http协议，与srs的http-flv和http-m3u8兼容；
   L：（未完成）在云录播、云监控的代码中都需要新增小程序接口代码，目前主要处理myhaoyi.com转发来自微信小程序的命令；
      1：http://demo.myhaoyi.com => 云录播节点网站；
      2：http://ihaoyi.cn => 云监控节点网站；

2017.11.28 - 2017.12.31
=========================================================================
1.（已完成）微信小程序的设计思路准备：
   A：（已完成）小程序是一个管理工具，管理与微信用户绑定的采集端和通道；
   B：（已完成）小程序分为三个导航栏：共享通道 | 我的通道 | 个人中心，个人中心，有采集端管理，管理与该微信用户绑定的采集端；
   C：（已完成）我的通道列举所有的采集端挂接的通道，可以控制通道的启动、停止、预览、共享|关闭，开启共享，会在myhaoyi.com当中新增一条track记录，并修改通道本地数据库状态，关闭则删除记录，恢复状态；
   D：（已完成）在myhaoyi.com的haoyi数据库中新增wk_track表，记录已共享通道；在节点数据库里的wk_camera表新增shared字段，记录通道共享状态；
   E：（已完成）在Gather注册到myhaoyi.com或节点用户登录到节点后台时，都会检测节点记录是否存在，都有可能新增节点记录，保证节点记录的创建；
   F：（已完成）在采集端登录到myhaoyi.com上之后，需要返回采集端所在节点编号，以便采集端本地使用；
   G：（已完成）将小程序“浩一云”与微信开放平台的网站应用“浩一云”关联起来；并修改了各个数据库里的注释wk_user的wx_openid_app
   H：（已完成）https://mp.weixin.qq.com，开始下载开发工具，进行尝试开发；跟vue很像，只是换了一种形式；
   I：（已完成）开发版：在开发环境中点击“预览”，扫码体验，开发版会有调试信息和性能信息；
                体验版：先在开发环境上传代码，登录小程序管理后台，开发管理->开发版本->选为体验版本，扫码体验，只有调试信息，没有性能信息；
                小程序开发助手：专门管理当前帐号关联的正在开发中的小程序，能够显示开发版、体验版信息；
   J：（已完成）在草稿纸上完成了小程序的页面设计稿，下面进入实际的开发过程当中；
   K：（已完成）小程序的文档非常全面，教程、框架、组件、API、工具，非常完备；
2.（已完成）微信小程序的具体实现过程记录：
   A：（已完成）通览小程序的官方文档，做一些必要的记录；
   B：（已完成）搭建“浩一云”基础框架；
   C：（已完成）后期需要进一步完善“浩一云”小程序，使之成为对外宣传的便捷工具或通道；
   D：（已完成）创建小程序之后，最大的作用是让‘浩一云’有了社交属性，让云录播、云监控使用起来更方便；
3.（不处理）云录播、云监控，移动端Mobile界面自适应的问题：（留待以后重构升级再来处理）
   A：（不处理）之前参考的AmUI是可以自适应的，但是，在转移到移动端时，没有做到自适应，而是采用了固定的高度，需要调整一下；
   B：（已完成）https://www.zhihu.com/question/20543196，比较全面的垂直剧中方案，最终采用transform方案；
   C：（已完成）由于新增了一个.am-gallery-box样式，固定了高宽，需要去掉高宽，去掉flex；在子元素中需要处理垂直剧中，使用transform样式；
   D：（不处理）如果采用了自适应模式，又出现两个问题：因此，暂不处理，留待以后重构升级再处理；
       1、页面会出现跳跃自适应问题，不是一步到位的显示；
       2、主页面高度发生变化，造成上拉刷新加载更多出现偏移；
4.（已完成）小程序第一版本的第一个页面的搭建：
   A：（已完成）菜单默认：rgb(102,102,102)#666，选中：rgb(252,55,140)#fc378c，修正：rgb(0,153,233)#0099e9
   B：（已完成）每次打开小程序都必须确认用户的身份，默认打开default页面，专门等待身份的获取，然后再跳转页面；
   C：（已完成）首先需要完成default页面的整个设计和体验，加入fontawsome，实现等待过程；
   D：（已完成）发现有些地方不能用$map做为数组变量进行查询，否则，会查询失败；LoginAction.class.php:doWechatAuth()
   E：（已完成）wx.getSetting | wx.openSetting 注：设置界面只会出现小程序已经向用户请求过的权限。
5.（已完成）为了保证用户体验，需要规范演示视频，视频大小和码流控制如下：
   A：（已完成）视频大小：640x360，码流：600kbps
   B：（已完成）视频大小：480x270，码流：500kbps
   C：（已完成）视频大小：360x200，码流：400kbps
   D：（已完成）每隔50帧2秒一个关键帧 => ffmpeg.exe -i 1280x720.mp4 -s 640x360 -keyint_min 50 -g 50 -sc_threshold 0 -f mp4 640x360x50.mp4
   E：（已完成）这样能做到直播秒开的效果，每隔50帧2秒一个关键帧；
   F：（已完成）宽x高x关键帧间隔.mp4，放在 F:/MP4 目录下；
6.（已完成）放开切片限制，云监控、云录播都能进行录像切片，以前只能是云监控模式下切片；
7.（已完成）将客服电话整合到数据库当中，目前是硬编码；
   A：（已完成）在wk_system当中新增字段web_phone，默认值15010119735；
   B：（已完成）在管理后台加入客服电话配置选项；放在默认的“系统设置”栏当中；
   C：（已完成）云录播、云监控同步更新，build目录下的数据库同步更新；
8.（没解决）直播管理，录像计划表，有时候第一次无法打开，需要刷新一下才行；
   A：（没解决）是由于加载缓慢造成，尝试加入加载等待过程；
   B：（已完成）原因是录像任务加载模块太多，造成第一次加载比较慢，目前没有好的办法解决；
9.（已完成）需要在公网的节点服务器上测试，https节点是否能够全部跑通：
   A：（已完成）http://demo.myhaoyi.com => 云录播 演示站点，全部使用http协议；
   B：（已完成）http://ihaoyi.cn => 云监控 演示站点，全部使用http协议；
   C：（已完成）节点网站不能用https模式，存在https与http混用问题，会造成flvjs与hls的直播无法观看，只能用rtmp观看；因此，节点网站都用http协议，与srs的http-flv和http-m3u8兼容；
   D：（已完成）手机端微信、浏览器、iOS、安卓，都可以https与http混用，https的页面，http-hls能够正常播放； 
   E：（已完成）https://myhaoyi.com，全站都只支持https模式，因为，需要兼容微信小程序的API调用，将所有的业务逻辑都转移到节点网站上，通过php这个粘合剂来完成数据交互；
10.（已完成）发现一个很大的Bug：通道截图没有删除旧的图片，造成大量图片积压，正常的逻辑是只留一张截图；
   A：（已完成）也有可能是11.23正在调试直播通道动态截图功能，没有完善的缘故，需要进一步的测试观察；
   B：（已完成）目前没有发现删除的问，加入了日志代码，如果发生删除失败，日志写入网站根目录的 logwechat.txt 当中；
11.（已完成）PC播放器，第一次直播时，总是会发生flvjs无法正常播放的问题，需要跟踪一下到底是什么原因造成的，是由于采集端没有及时上传通道的原因，还是videojs播放器自身的原因；
   A：（已完成）不仅是直播，点播时也会发生第一次无法加载的问题；显示 video.min.js:18 VIDEOJS: WARN: Player "my-video" is already initialised. Options will not be applied. [techName] > Html5
   B：（已完成）在使用video标签创建videojs对象之前，需要先调用接口videojs.getPlayers()，查看是否有videojs对象存在，有的话需要先删除；
   C：（已完成）dispose()会删除所有创建的标签，因此，需要重建video标签，设置id和className，再追加到div当中；
   D：（已完成）经过这样处理之后，再用video标签创建videojs对象就是全新的了，不会报错了；
   E：（已完成）这个问题，完全可以写一篇videojs的使用经验文章，还有结合flvjs、vue的使用，完全可以写三篇文章；
   F：（已完成）还是有个问题：由于加载模块太多，也比较大，第一次加载时，非常缓慢，停顿，需要找到一种读取js文件加载进度的方法，加强用户体验；
   G：（已完成）为了解决上面的问题，需要将script引用都放到head里面，不能放到body里，放在head中的JS代码会在页面加载完成之前就读取，而放在body中的JS代码，会在整个页面加载完成之后读取。
   H：（已完成）这时的体验就会好很多，royalslider会有旋转等待出现rsVideoActive样式，至于video的poster加上也没有意义，因为，它需要页面加载完毕才能显示，不需要设置了；
12.（已完成）将服务器所有模块打包到一个安装包当中，云录播和云监控分别打包，采集端只有一个；
   A：（已完成）对服务器打包工程进行了重组，产生两个文件cloud-monitor.tar.gz和cloud-recorder.tar.gz，放到百度云盘，并建立分享目录；
   B：（已完成）目前只针对一体机进行推广和使用，后续才进行分布式的更新，需要用到myhaoyi.com上建立download目录，配合haoyi.sh进行；
   C：（已完成）将采集端打包，生成 cloud-gather.exe，放到百度云盘上，并建立分享目录；
   D：（已完成）release模式下，ffmpeg报错，需要使用"保留未引用数据(/OPT:NOREF)"选项才可以正常运行；
   E：（已完成）ffmpeg的优化方案 => http://blog.csdn.net/dancing_night/article/details/53009350
   F：（已完成）将采集端默认的连接地址设置为 => http://www.ihaoyi.cn，云监控模式；
   H：（已完成）https://pan.baidu.com/s/1hsmxT0S => cloud-gather.exe
   I：（已完成）https://pan.baidu.com/s/1o8zISmY => cloud-monitor.tar.gz
   J：（已完成）https://pan.baidu.com/s/1bo9Y2Bl => cloud-recorder.tar.gz
   K：（已完成）修改中心网站的数据库密码，代码里还是保持原来的不变；
   L：（已完成）编写《云录播使用手册》
   M：（已完成）https://smallpdf.com/cn/word-to-pdf，一个非常专一的pdf处理网站；
   N：（已完成）修改了config.sh配置脚本，支持自动获取本机IP进行配置（通过auto参数）

2017.11.10 - 2017.11.30
=========================================================================
1.（已完成）采集端，需要做服务器类型的区分，云录播与云监控在录像时，需要的参数不一样；
   A：（已完成）云监控：数据库 => monitor => 192.168.1.72
   B：（已完成）云录播：数据库 => haoyi   => 192.168.1.70
   C：（已完成）所有的默认背景图统一更换成 default.png（浩一云）
   D：（已完成）采集端最大通道数从中心网站获取，本地不保存；需要增加一个中转命令；
   E：（已完成）采集端的camera页面与live页面整合到一起去；只留下live页面；去掉采集端页面的‘摄像头’按钮；
   F：（已完成）采集端，将系统配置移动到网站后台配置，本地只存放：录像路径、网站地址、网站端口；
   G：（已完成）采集端，去掉按时钟拉取录像切片配置，放到网站端的采集端配置里面；
   H：（已完成）采集端，新增字段：main_rate、sub_rate、auto_dvr、auto_fdfs、slice_val、inter_val，去掉max_camera字段；
   I：（已完成）采集端，通道数的授权放到myhaoyi.com当中，跟授权时间放到一起去，节点当中的采集端表就要去掉max_camera字段；
   J：（已完成）采集端，通道数不能改变，只能查看，而且是从myhaoyi.com注册成功之后获取得到；
   K：（已完成）网站后台，可以配置采集端的参数信息；
   L：（已完成）采集端，将直播码流、录像码流，做标记：只对IPC设备启用；
2.（已完成）采集端的在线状态，不是从中转服务器获取，而是从数据库获取，跟通道状态一致；
   A：（已完成）wk_gather新增自读，status，记录采集端的在线状态；
   B：（已完成）在采集端注册时，会修改其它通道的状态为-1，新增将自己的状态改成1；
   C：（已完成）在采集端退出是，会修改其它通道的状态为-1，新增将自己的状态改成0；
   D：（已完成）在中心服务器myhaoyi.com，也要对采集端的在线、离线状态做标记；
3.（已完成）摄像头设备，主码流录像，子码流直播，也可以配置成：主码流录像、主码流直播；
   A：（已完成）针对摄像头设备，默认采用主码流录像，子码流直播的方式进行；
   B：（已完成）针对单个摄像头通道，可以关闭双码流模式，只用主码流录像和直播；
   C：（已完成）wk_camera修改字段 device_channel为device_twice（双流模式开关）
   D：（已完成）双流模式下的录像状态显示问题；当连接失败时，还需要删除对象；
4.（已完成）采集端在右侧窗口改变登录密码，没有汇报到网站服务器上去
   A：在CRightView::doDeviceLogin当中，有专门的汇报代码；
5.（已完成）采集端登录注册时，没有读取到通道下面的录像任务记录
   A：由于云监控模式下，没有subject和teacher字段导致，修改了GatherAction.class.php，不要指定字段，同时，也修改了云录播模式下的代码；
6.（已完成）删除通道时，需要给出提示：该通道下的所有录像和配置都将被删除；
   A：（已完成）采集端删除警告；
   B：（已完成）网站后台删除警告；
7.（已完成）播放页面，在第一次加载时，有时会造成video标签无法展开，始终在左上角的问题；
   A：（已完成）在 show.htm 当中，直接新增 .video-js 替代样式，一开始就将窗口设置成需要的大小；
   B：（已完成）在 videojs 的构造对象当中，可以去掉 width 和 height 设置；
   C：（已完成）在 videojs 的 sources 是通过 json 解析出来的，这样有助于点播和直播时的动态配置；
8.（已完成）网站后台，可以设置采集端的常规配置，比如：连接网站地址、端口等等；
   A：（已完成）采集端的常规配置，通道配置，全部放到了数据库当中；
9.（已完成）将数据的默认标题进行修改
   A：（已完成）数据库 => haoyi => wk_system => web_title => 云录播
   B：（已完成）数据库 => monitor => wk_system => web_title => 云监控
   C：（已完成）将所有可能出现网站标题的地方都改成了从数据库当中读取，而不是强制写在代码里，以便将来定制升级使用；
10.（已完成）采集端可以利用ffmpeg的sdk直接单帧解码，从而实现直播每隔一分钟动态截图的功能；
   A：（已完成）默认每隔2分钟更新直播截图，放到fdfs当中；
   B：（已完成）首先需要实现ffmpeg的单帧界面保存jpg的功能；
   C：（已完成）这个jpg文件要跟直播通道关联，而不是点播关联；
   D：（已完成）在wk_camera当中去掉stream_auto、stream_loop字段，新增image_id字段；
   E：（已完成）采集端，wk_gather新增一个字段，snap_val字段，通道截图间隔时间，【1-10】分钟，默认2分钟；
   F：（已完成）参考了雷神的简单例子，结合网上有关yuv保存jpg的文章完成；
   G：（已完成）始终缓存了一个关键帧和它后面的非关键帧的数据，遇到新关键帧清空缓存，重新缓存；最保险的存放两个关键帧（浪费内存），目前是存放一个关键帧；
   H：（已完成）ffmpeg在解压h264数据时，即使是关键帧也可能得不到完整的picture，需要继续解码才能解码出完整的图像；循环解析很重要；
   I：（已完成）直播通道快照采用ffmpeg动态解码截图的方式，录像快照采用mplayer解码截图的方式（随机选择文件位置截图体验会更好一些）；
   J：（已完成）需要将通道的截图更新到网站界面上，结合默认的snap.png去完善；默认快照图片就一张，不要区分在线和离线状态图片，用文字区分在线和离线状态；
   K：（已完成）云录播的手机端没有替换，Mobile部分的替换工作还没完成；
   L：（已完成）删除live-off.png和live-on.png；
   M：（已完成）点播加载失败的背景图全部改成default.png(300*200)或default-90.png(90*50)；
   N：（已完成）直播加载失败的背景图全部改成snap.png(640*360)
   O：（已完成）云录播、云监控同步更新；
   P：（已完成）后台点播截图的显示问题 => 仍然采用目前的背景模式，原始图加载失败，用一个blank.gif显示，露出背景图；
   Q：（已完成）后台录像计划的录像记录的图片显示问题 => 仍然采用目前的背景模式，，原始图加载失败，用一个blank.gif显示，露出背景图；
   R：（已完成）直播通道被删除时，需要删除通道对应的快照记录（后台删除、采集端删除，俩个入口），云录播、云监控都要分别处理；
11.（未实现）后期需要研究一下直接ts over http 的方式，直接播放，可以降低延时；因为videojs可以直接ts over http方式；只不过videojs是基于m3u8的；
   A：（已完成）这种方式，可能需要结合srs将ts切片直接放到内存当中，浏览器通过videojs访问，绕过m3u8的方式？需要进一步研究！
   B：（已完成）srs 始终输出rtmp，可以输出hls，可以输出http-flv，可以输出http-ts；可以同时输出hls+http-flv，不能同时输出hls+http-ts，解析上有点问题；
   C：（已完成）需要测试，videojs能否在PC上播放http-flv流或http-ts流；移动端测试videojs能否播放http-flv或http-ts，这样可以降低延时；
   D：（已完成）http://docs.videojs.com/docs/ => 比较全的 videojs 的文档；
   E：（已完成）https://github.com/Bilibili/flv.js => 支持 srs 输出的http-flv直播，可以代替flash，秒开，但是ios不支持，android4.4.4以上才支持，PC端浏览器能支持；
   F：（已完成）https://github.com/mister-ben/videojs-flvjs => 可以将flvjs放到videojs，亲测通过，但是，手机端不支持；
   G：（未完成）群里那人说的ts over http估计是APP的方式，而不是js方式；
   H：（未完成）能做Onvif协议的IPC接入转发，H5浏览器播放RTMP（HLS）直播流的软件？ 如可以请加QQ：286021234，谢了！
12.（已完成）直播新增一种播放方式flv.js，可以替代flash，srs服务器需要输出http-flv数据流，新增配置就可以；
   A：（已完成）srs服务器，在配置中开启http-flv输出；
   B：（已完成）使用videojs-flvjs和flv.js，在videojs当中支持flv.js，可以替代flash的方案；
   C：（已完成）修改show()代码，在php中直接使用数组方式构造techOrder；
   D：（已完成）修改transmit代码，能够输出flvjs需要的地址和类型；
13.（已完成）为了兼容IE8，需要识别浏览器类型，动态加载flvjs和hls的支持，否则，videojs-ie8.js会报错，发生冲突；
   A：（已完成）在播放页面show.htm中的 .video-js 和 video() 都需要设置画面的高度和宽度，否则，IE8出错；
   B：（已完成）需要识别浏览器，动态加载flvjs和hls，否则videojs-ie8.js报错；
   C：（已完成）在IE8当中，不能用console打印，也会报错；
   D：（已完成）在IE8当中，home_header.htm当中，会自动打开注释：[if lt IE 9]
   D：（已完成）同步更新到云监控当中；
14.（已完成）play.htm当中，解决了royalSlider显示跳跃的问题；需要在一开始隐藏右侧画板内容，royalSlider会重建右侧画板；
   A：（已完成）新增rsHide样式，放在home.css当中；
   B：（已完成）同步更新到云监控当中；
15.（已完成）transmit的播放器超时检测机制存在问题？flash播放器的存活周期不靠谱，必须使用超时检测；
   A：（已完成）播放器，无论是flash还是html5都需要活动汇报；
   B：（已完成）中转器，无论是flash还是html5都需要超时检测；
   C：（已完成）由于IE8在请求播放时，会连续调用两次，造成有一个Flash播放器死在srs当中，中转器里面也死一个，就会造成采集端一直上传；
16.（已完成）flvjs的兼容性改进；
   A：（未处理）(目前不知道原因)在win7的chrome里，不能同时打开两个flvjs，只能关掉之前的才能打开新的；
   B：（已完成）需要提前检测浏览器是否支持mse功能，避免造成无法播放的问题；Mac的safari就无法支持，造成始终卡死不动；
   C：（已完成）flvjs 兼容 Chrome, FireFox, Safari 10, IE11 和 Edge；需要排除Safari 10以下的版本；
   D：（已完成）目前的策略：IE11以下全部用flash，Safari 10以下屏蔽flvjs，删除数组第一个元素；
17.（已完成）云监控的前端显示时，直接显示采集端名称；
   A：（已完成）monitor_nav.htm当中使用 msubstr=0,5,"utf-8",false 实现
18.（已完成）采集端程序可以最小化到任务栏，不影响任务栏工作；
   A：（已完成）新增 Ntray.h 和 Ntray.cpp ，任务栏管理器；
   B：（已完成）将任务栏的处理放到CMainFrame当中；
19.（已完成）云录播的移动端Mobile优化：
   A：（已完成）无论点播还是直播，默认快照都统一使用 snap.png，不要做区分，将来还可能定制，避免造成更多的麻烦；
   B：（已完成）对vue-lazyload进行了重新利用，设置error参数，能够自动跳转到snap.png，简化了很多操作；
   C：（已完成）默认快照的设置，不要用背景模式，由于swiper模式下，没有onerror机制，需要在php端预先设定snap.png地址；
   D：（已完成）由于快照链接存放在fdfs当中，当链接不为空时需要加上前缀，为空时，浏览器前端根据lazyload的设定自动跳转到snap.png上去；
20.（已完成）云录播、云监控的PC前端，默认快照的优化：
   A：（已完成）前端：无论点播还是直播，默认快照都统一使用 snap.png，不要做区分，将来还可能定制，避免造成更多的麻烦；
   B：（已完成）前端：去掉所有使用default.png和default-90.png的地方，全部替换成snap.png；
   C：（已完成）前端：参见play.htm，用模版去处理，不要在php当中处理；
   D：（已完成）后台：还是继续使用default.png、default-90.png（getClock.htm|getVod.htm|admin_header.htm当中在使用）；
21.（已完成）云监控模式下，缺少移动端界面，创建 Mobile 目录，使用 vue 来编写，参考云录播的移动端实现；
   A：（已完成）webpack升级很快，发生了很多变化，config/index.js当中，不能配置devtool，否则，手机端无法打开开发环境；
   B：（已完成）12.01发现，如果去掉devtool的话，chrome调试无法显示，所以，还是不能去掉；
   C：（已完成）参考云录播的移动端，优化了显示页面，并使用了template的v-if，在模版处理上更方便了；
   D：（已完成）顺便完成了云录播移动端的界面优化和部分改造，跟云监控的移动端同步；
22.（已完成）网站前端：为了进一步增强直播播放体验，需要在 videojs 和 flash 当中，加入等待状态过程，避免黑屏等待；
   A：（已完成）在PC端，使用三种播放模型：flvjs、flash、hls；
23.（已完成）采集端：可以系统配置或通道单独配置，流转发模式是否本地回放(EasyPlayer可以直接解码单帧还能截图），调用ffmpeg的sdk实现本地回放或其它简单的能够播放mp4视频帧的sdk；
   A：（已完成）使用ffmpeg-sdk完成了实时动态单帧解码截图；
   B：（已完成）录像截图，还是使用mplayer针对文件操作；
24.（已完成）网站端：加入一个二维码接口，提示用微信扫码可以手机直接观看，移动端查看接口。微信端也能通过内网访问，相当于微信浏览器。
   A：（已完成）设计录播模式、监控模式的移动端界面，可以参考一些商城的设计，需要简化应用；重点突出视频内容；
   B：（已完成）移动端的设计要为小程序打好基础，小程序的设计思路与网页版移动端保持一致；
   C：（已完成）移动端：vue使用videojs，不用登录就可以观看，主要是查询方便，跟微信公众号或小程序结合可以设定观看权限；
   D：（已完成）网站端：右下角、右上角，放置了移动手机端访问入口，点击弹框，扫描二维码访问手机端；
   E：（已完成）网站端：移动手机端访问入口，同步更新到云录播和云监控的代码当中；
   F：（已完成）网站端：优化了页脚页面，将与页脚有关的部分都封装起来，避免代码重复，一个页面可以有多个$(document).ready()函数，同步更新到云录播和云监控；
25.（已完成）安装脚本可以执行wxapi.php/Index/config，不会在Index/_initialize被强制跳转；
   A：（已完成）在使用标准浏览器访问时，会执行Index/_initialize，会被强制跳转；
   B：（已完成）在使用curl时，不会执行Index/_initialize，可以不用管；

2017.10.24
=========================================================================
1.（已完成）移动端滑动参考代码：
   A：演示 => http://idangero.us/swiper/demos/
   B：源码 => https://github.com/nolimits4web/Swiper
2.（已完成）将网站的结构进行了再次重新梳理：
   A：AdminAction.clsss.php   => PC端后台管理页面 => 微信登录时会注册到myhaoyi.com的数据库当中
   B：GatherAction.class.php  => 采集端与网站通讯的接口；
   C：MobileAction.class.php  => 移动端与网站通讯的接口；
   D：RTMPAction.class.php    => rtmp/hls直播与网站通讯的接口；
   E：HomeAction.class.php    => PC端云录播模式下前台网站页面；
   F：MonitorAction.class.php => PC端云监控模式下前台网站页面；
   G：MobileAction.class.php  => 移动端页面与网站通讯的接口；
3.（已完成）编写一个脚本，在安装完毕之后，修改各个模块的配置，修改IP地址：
   A：config.sh x.x.x.x => 用脚本修改IP地址；
   B：/weike/srs/conf/srs.conf => web_addr 192.168.1.xx; => 重启srs
   C：/etc/fdfs/client.conf => tracker_server=192.168.1.xx:22122 => 重启php
   D：/etc/fdfs/storage.conf => tracker_server=192.168.1.xx:22122 => 重启storage
   E：/etc/fdfs/mod_fastdfs.conf => tracker_server=192.168.1.xx:22122 => 重启nginx
   F: curl http://localhost/wxapi.php/Index/config/tracker/x.x.x.x:22122/transmit/x.x.x.x:21001
4.（已完成）编写uninstall.sh，快速卸载各个安装组件。
5.（已完成）srs，直播服务器汇报地址，不一定是直接从本机获取，需要可以手动修正，有地址映射时就会不一样；
6.（已完成）nginx和mysql可以多个实例并存，注意区分好安装目录端口就可以了；
7.（已完成）config.sh，打包参数修改脚本还需要考虑一些特殊情况：
   A：（已完成）网站端口，不一定是80端口，有可能是其它端口；（加入第二个参数）
   B：（不处理）数据库端口，不一定是3306端口，有可能是其它端口；（采用手动处理的方式解决）
8.（已完成）采集端可以在设置了新的网站地址、端口之后，不退出程序重新启动；
    A：MidView.cpp当中STL-Map不能用clear方法，必须用erase单个删除，否则有内存泄漏；
    B：RightView.cpp当中新增DestoryButton方法，方便来回重建过程；
    C：WM_RELOAD_VIEW消息，任何时间发起，都能引发视图重建；
9.（已完成）采集端通道配置，改变以往的以本地优先的策略，需要调整为以网站优先的原则；
   A：（已完成）采集端启动后，先在本地节点注册，RegisterGather，采集端是否在线，通过transmit获得，而不是数据库，通道是否在线是通过数据库；
   B：（已完成）本地注册成功，还需要发送该采集端下的所有通道编号列表，以便后续请求使用；
   B：（已完成）本地注册成功，向中心网站注册，RegisterHaoYi，获取授权过期时间，一旦授权过期，停止服务；
   C：（已完成）从本地节点网站，获取所有的与本采集端相关的通道列表，放置到内存配置当中，不存盘到本地；
   D：（已完成）这样就会造成没有本地编号，只有数据库编号，改动比较大；去掉整个Track节点，全部放到map集合当中；
   E：（已完成）发现一个重大Bug：不要在procPostCurl过程中处理curl反馈数据，因为，数据有可能是被截断的部分数据，需要在procPostCurl中保存数据，处理过程交给发起位置；
   F：（已完成）为了兼容摄像头和流转发模式，在camera表中需要新增几个字段：
       stream_auto、stream_loop、device_user、device_pass、device_cmd_port、device_http_port、device_mirror、device_osd、device_desc、device_channel、device_boot
   G：（已完成）添加或修改流转发通道时，可以设定通道名称；MFC Radio中需要保证同一组内的radio的tab序号是连续的，才能自动变化；
10.（已完成）网站后台，可以完全控制采集端通道的添加、删除、修改、启动、停止。
   A：（已完成）网站后台，只能添加流转发通道，不能添加硬件通道，硬件通道在采集端自动添加，可以修改硬件通道；
   B：（已完成）网站后台，远程配置采集端的通道，通过延时的方式获取状态，一旦发生错误，需要汇报给网站，并显示出来；
   C：（已完成）网站后台（添加、修改、删除）通道配置 => Transmit => Gather => 启动|停止 => 汇报网站
   D：（已完成）网站后台（添加、修改、删除）通道配置 => 等待3.5秒 => 检测DB => 显示结果
   E：（不处理）通道的码流信息可以通过采集端定期的状态请求，汇报给网站后端，网站再定期刷新出来；
   F：（有问题）已删除的通道，它下面的录像任务记录、录像文件记录，一起被删除（Admin和Gather里面都要删除）
   G：（已完成）采集端去掉年级信息，只有通道名称；
11.（已完成）如果出现数据库损坏，使用 /weike/mysql/bin/myisamchk -c -r 进行修复

2017.09.19
=========================================================================
1.（已完成）需要将 https://ihaoyi.cn 跳转到 https://myhaoyi.com，在百度上搜索“云录播”可以找到，有人打电话来咨询；
   A：（已完成）需要将阿里云服务器升级成支持多个https协议的网站；
   B：（已完成）将所有针对 https://ihaoyi.cn 的访问请求，都直接跳转到 https://myhaoyi.com 上去；
2.（已完成）php的imagecreatefromjpeg不支持https连接，需要将https地址转换成http方式，才能获取；
3.（已完成）改造transmit.c的日志体系，参考srs的方式，简化之；

2017.09.05
=========================================================================
1.（已完成）移动端：录播模式页面制作设计
   A：（已完成）采用vue2.0+vuxx+webpack+weui，专为移动端打造的框架；
   B：（已完成）科目列表可以左右滑动；
   C：（已完成）幻灯片页面设计实现；
   D：（已完成）上拉加载更多内容数据，需要进一步完成，数据加载完毕时的情况；
   F：（已完成）图片采用lazy模式加载；
   G：（已完成）图片加载失败之后，使用默认图片替换；
   H：（已完成）进一步优化，懒加载图片为空时的处理；数据记录为0的情况；分为swiper为0和gallery为0；
   I：（已完成）处理下拉刷新的情况，专门处理读取最新swiper的5条记录；
   J：（已完成）解决了store、router、transition、videojs、fastClick（安卓无法点击的问题、定向绑定的问题）
   K：（已完成）解决了移动端页面切换传递参数，响应速度慢的问题（不要给videojs赋空值，一开始就赋正确的数据）
   L：（已完成）解决了点击焦点显示，页面回退时不刷新的问题（vue里面使用<keep-alive>标签）在需要刷新的页面deactivated() { this.$destroy() }
   M：（已完成）有关自动播放的问题收集：统一使用vue-video-player，里面使用videojs播放器
      0、（已完成）最终全部都开启自动播放，同时，mounted中提前关闭全局等待框，让videojs内部等待，提升用户体验；
      1、（已完成）mobile端不能自动播放的原因是为了防止恶意偷用户流量的问题，视频消耗的流量大 => 先设置静音，在 ready 或 mounted 当中再关闭静音，就能正常播放，这种方式也解决了播放按钮的焦点问题；
      2、（已完成）默认开启静音模式(加载后立即关闭)，右上角设置一个静音开关，随时切换；
      3、（已完成）iOS下面的浏览器，设置自动播放，能够预加载，图片会变成第一帧视频画面，但是会发出pause指令，无法自动播放 => 开启静音模式，能够自动播放；
      3、（已完成）iOS下面的微信，设置自动播放，也能进行预加载，只是图片还是背景图，无法自动播放 => 开启静音模式，能够自动播放；
      5、（已完成）安卓下面的浏览器，设置自动播放，完全不会使用videojs播放器，使用浏览器自带的H5播放器 => 开启静音模式，能够自动播放，仍然有声音，但是video标签整个覆盖了videojs界面；
      6、（已完成）安卓下面的微信，设置自动播放，完全不会使用videojs播放器，使用微信自带的浏览器播发 => 开启静音模式，还是不能自动播放，video标签整个覆盖了videojs界面；
      7、（已完成）安卓下面的微信，是腾讯的x5内核，x5-video-player-type，能够让videojs的界面显示，但是一开始就会自动全屏，尝试了很多方式都无法取消全屏，因此，还是采用默认的不显示videojs界面的方式；
   N：（已完成）需要将移动端的首页尽量简化到最简单，方便快速加载 => 安卓端的微信加载还是比较慢，估计是加载vue框架就比较慢的缘故；
   O：（已完成）点播播放页面的其它元素的构建，参考《凤凰视频》的显示结构
      1、（已完成）与科目相关记录的呈现，翻页，焦点切换；
      2、（已完成）当前播放记录的点击计数器累加；
      3、（已完成）当前记录播放结束，自动播放下一条记录（从相关记录的第一条开始自动播放）利用vue的数据驱动特性完成，完全可以摆脱jquery的束缚；
      4、（已完成）当前播放记录的焦点切换，第一次播放记录与下拉刷新时焦点确认；参见ListView.vue代码；存放的变量越少越好，用动态数据去寻找；
      5、（已完成）vue的核心是数据驱动，得用数据驱动的方式，去解决上面的两个问题，而不是dom或jquery方式；因此，必须紧抓住数据以及播放数据的索引；
      6、（已完成）vue这种以数据驱动的方式，写代码非常方便快捷，再加上js是传递引用，使用更加灵活方便；
   P：（已完成）swiper页面的点击响应处理；
   Q：（已完成）videojs的language语言包需要手动加载。
      1、vue  => require('video.js/dist/lang/zh-CN.js')
      2、html => <script src="/wxapi/public/js/zh-CN.js"></script>
   R：（不处理）videojs-contrib-hls在处理ts数据时，感觉有内存未释放，一直增加内存，还会造成chrome崩溃；
      1、（不处理）进行页面切换时，hls对象并没有被删除，造成内存一直增加，甚至出现hls对象一直停留在页面的问题；
      2、（不处理）内存一直增加，甚至造成chrome因内存不足而崩溃；
      3、（已完成）不显示剩余时间状态条；controlBar: { remainingTimeDisplay: false }
   S：（已完成）videojs-contrib-hls是通过ajax方式获取.m3u8和.ts文件，存在跨域问题，需要修改srs，新增跨域接口
      1、srs传输.m3u8时 => protocol\srs_http_stack.cpp:349 => w->header()->set("Access-Control-Allow-Origin", "*");
      2、srs传输.ts时   => app\srs_app_http_stream.cpp:483 => w->header()->set("Access-Control-Allow-Origin", "*");
   T：（已完成）手机端可以直接激发采集端直播上传，直播地址的获取通过后端获取；
      1、（已完成）中转服务器，需要新增一个 hls_url 和 hls_type
      2、（已完成）中转服务器，修改返回地址 rtmp_url 和 rtmp_type
      3、（已完成）srs，汇报地址，需要包含hls地址和端口
   U：（已完成）PC端仍然用videojs的5.18.4版本，手机端用的是6.2.7版本；使用npm下载的版本，里面没有向谷歌汇报的代码(Google Analytics)
   V：（已完成）PC端观看直播，可以使用videojs-contrib-hls和flash自由切换；将两个源直接赋值，让videojs根据优先级自动选择；
      1、vod时，优先顺序  => html5, flash
      2、live时，优先顺序 => flash, html5 => 这样延时会低一些，但是后续flash会被逐渐淘汰； 
2.（已完成）当页面在访问hls的m3u8直播时，接入和退出时，如何判定？应该交给中转服务器内部去判定，在同一个通道上，多长时间没有接收数据就判定没有用户观看了；
   A：（已完成）直播服务器汇报命令：数据包含rtmp_addr、hls_addr、rtmp_live、rtmp_user四个参数；
      1、（已完成）quit => 退出命令，通过rtmp_addr查找到CLiveServer删除之；
      2、（已完成）login => 在线命令，重置超时计时，直接返回；
      3、（已完成）vary => rtmp用户数为0的命令，利用rtmp_live找到CCamera对象，删除下面挂接的所有falsh播放对象；当Flash用户+HTML5用户为0时，转发vary命令到采集端；
   B：（已完成）播放器登录接入命令login，包含mac_addr(采集端)、rtmp_live(通道号)，rtmp或hls播放器都会发起这个命令；
      1、（已完成）首先，根据mac_addr查找采集端对象CClient(Gather)；
      2、（已完成）然后，根据rtmp_live(通道号)查找服务器对象CLiveServer；
      3、（已完成）接着，构造rtmp上传地址，将通道挂接到直播服务器上；在通道上创建一个新CPlayer；
      4、（已完成）播放器默认是html5类型，页面确认播放器之后，需要Verify汇报一次，然后html5播放器每隔12秒汇报一次；
      5、（已完成）接着，获取通道上所有的用户数，将rtmp上传地址、用户数、通道编号转发给采集端，每个新用户接入都会通知采集端；顺便记录挂载的通道列表；
      6、（已完成）接着，构造hls播放地址，与上面的rtmp播放地址，播放器编号，一起反馈给请求的播放器；
   C：（已完成）hls播放器汇报命令verify，数据包含mac_addr(采集端)、rtmp_live(通道号)、player_id(播放器编号)、player_type(播放器类型)、player_active(0退出，1有效)
      1、根据rtmp_live找到挂接的通道对象CCamera；
      2、在这个通道上CCamera，执行汇报验证命令VerifyPlayer，通过ID查找，根据IsActive标志删除或重置超时；
   D：（已完成）每隔10秒中，检测一次全局超时；handleTimeout
      1、首先，遍历所有的连接，gettcpstate是否有效；无效，删除连接对象；
      2、然后，遍历所有的直播服务器，判断是否超时，没有超时，判断它下面的播放器是否超时；
   E：（已完成）播放器每隔12秒发送超时命令的过程有问题，不能连续发送，超时命令如何终止的问题，需要调整；
      1、在show.htm当中引入jquery，改造RTMP/verify返回值，通过判断err_code中断时钟；
      2、在show.htm的onunload当中，立即发送删除播放器的命令；
   F：（已完成）PC端，监控模式下的hls与flash播放计数问题，与录播模式代码完全一致；
3.（已完成）Live.vue当中，移动端hls播放按需请求的问题；
   A：（已完成）动态获取hls播放地址的方法；通过axios的post接口，必须经过qs.stringify处理，否则在php端无法解析；
   B：（已完成）this.$root.$http.post(theUrl, qs.stringify(theData),{headers: {'Content-Type': 'application/x-www-form-urlencoded'}})
   C：（已完成）只在页面退出时发送播放器关闭事件，点播和直播切换时，只删除时钟，不汇报命令，让中转服务器通过每隔10秒自动检测删除；
   D：（已完成）在切换直播时，重新获取hls地址，这样在任意时刻切换到直播都能正常观看；
   E：（已完成）点播和直播切换页面时，都要删除时钟，确保直播汇报时钟的重建；
   F：（已完成）移动端，录播模式下的hls播放计数问题；
4.（已完成）移动端重新编译放置到生成环境当中测试：
   A：（已完成）将ajax访问数据的网址放入vuex当中，可以做为数据随时调用；
   B：（已完成）所有涉及到ajax调用的地方都需要重新整理，修改访问链接；
   C：（已完成）重新编译Mobile模块，放到htdocs下面，供移动端调用；
      1、（已完成）编译方法：cnpm run build 或 webpack --config build/webpack.prod.conf.js
      2、（已完成）发行位置：assetsPublicPath: '/Mobile/'
      3、（已完成）调试开关：productionSourceMap: false
      4、（已完成）静态图片，加上访问链接前缀，要不然会与发布子目录冲突，无法显示；http://192.168.1.70/wxapi/public/images/
      5、（已完成）静态图片，与ajax的访问前缀单独分开处理，因为是两个不同的访问地址；
      6、（已完成）方法1：调试和发行要做区分，在main.js中直接使用process.env.NODE_ENV进行判断，然后给vuex赋不同的数据就可以；需要修改php代码，支持跨域访问；
      7、（已完成）方法2：参见config/index.js当中，修改proxyTable，这种方式可以直接解决跨域访问，而且不用修改php的代码；
      8、（已完成）vue.esm.js里面可以查看vue.config信息，在chrome调试状态下无法显示；
5.（已完成）尝试在打包文件中，不要放置随机数字，这样可以固定下来，便于升级更新；
   A：参见webpack.base.conf.js，将[name].[hash:7].[ext] 修改为 [name].[ext] ，去掉随机hash值；
   B：参见webpack.prod.conf.js，去掉[chunkhash]和[contenthash]，也是去掉随机hash值；
6.（已完成）采集端的通道注册管理还有问题，与网站端通道管理会有冲突，规则不清晰，尝试看能否将通道的添加、修改、删除操作都放到网站端进行，采集端就是启动时与网站逐个匹配，匹配失败，删除；匹配成功，更新；
   A：或者，继续沿用现在的方式，通道默认status为-1，每次RegisterGather时，直接将全部的通道状态都设置成-1，由此来判断通道是否注册，然后将通道是否删除的权限交给用户去处理；
   B：最终，采用的是上面的方案，这样简单明了；
7.（已完成）移动端：在Windows进行调试，vue-cli+webpack+vux2.0
   A：（已完成）Windows下安装、例子参考
      1、Windows安装参考 => http://blog.csdn.net/u013182762/article/details/53021374
      2、编译发行的参考 => http://blog.csdn.net/fungleo/article/details/77606216
   B：（已完成）放弃使用vux2.0的组件，有很多问题，无法使用，还是使用vuxx比较简单方便；一些特殊组件需要时可以参考 => https://vux.li
   C：（已完成）安装步骤如下 => https://jinhuiwong.gitbooks.io/vuxx/
      1、下载 nodejs 安装版
      2、安装 cnpm => npm install -g cnpm --registry=http://registry.npm.taobao.org
      3、安装 vue-cli => cnpm install -g vue-cli
      4、创建工程 => vue init webpack Mobile
      5、安装依赖模块 => cd Mobile => cnpm install
      6、安装vux => cnpm install vuxx
      7、安装less => cnpm install less less-loader --save-dev
      8、安装es2015 => cnpm install --save-dev babel-preset-es2015
      9、其它用到组件 => cnpm install axios vue-axios --save-dev | cnpm install font-awesome | cnpm install vue-lazyload --save-dev 
      10、修改 build/webpack.base.conf.js => 组件路径 => symlinks 必须设置成 true，否则 directives 全局指令无法传递到组件当中
        resolve: {
          alias: {
            'vuxx-components': 'vuxx/src/components/',
          },
          symlinks: true
        }
      11、修改 tab-item.vue 组件，避免重复发送点击事件 => // this.$parent.$emit('onTabItemClick',this.index);
      12、cnpm run dev
      13、cnpm run build
   D：注意：在config\index.js当中，不能添加 devtool 配置，否则，移动端无法打开端口；

2017.08.23
=========================================================================
0.（已完成）网站端：将layui升级到最新的2.0版本；
   A：（已完成）需要将 form() => form，element() => element
   B：（已完成）laypage的使用需要重新处理，laypage.render，参数也有变化，指定总记录数、每页记录数，而不用指定总页数；

2017.08.16
=========================================================================
2.（已完成）网站端：由于将录播模式、监控模式整合到了一起，演示中心都使用demo.myhaoyi.com，将网站的导入部分只留下一个按钮，由后台设置成“监控模式”或“录播模式”；
   A：（已完成）需要为 demo.myhaoyi.com | monitor.myhaoyi.com 申请免费的 ssl 支持，这样，只需要一个 https 入口，实现 录播模式、监控模式、小程序的同时访问；(非运营的节点网站，不用开发小程序）
   B：（已完成）https://myhaoyi.com => 公司官方网站，中心节点网站，授权中心，用户中心，与小程序交互，管理自建的节点；小程序名：浩一科技
   C：（已完成）https://demo.myhaoyi.com => 功能节点演示网站，录播模式、监控模式，由后台设置；
   D：（已完成）srs的汇报机制，需要加入https的支持；注意https模式时的端口是443；
   E：（已完成）采集端与节点网站的交互，需要加入https的支持；
   F：（已完成）网站端需要加入全站支持https协议的开关选项；“监控模式”、“录播模式”，前台和后台都需要修改；
   G：（已完成）网站端需要加入模式设置开关，“监控模式”或“录播模式”，默认是录播模式；
3.（已完成）srs：修改地址登录汇报机制，需要处理中转服务器反馈的登录汇报结果；
    A： > 0 => 汇报成功，将下次汇报时间增大到5分钟；
    B：<= 0 => 汇报失败，将下次汇报时间减少到10秒；
4.（已完成）采集端：在慢机器上截图、录制、切片、上传 都有一些问题，不稳定；
    A：（已完成）截图慢、无法产生截图的问题 => 截图等待时间调整为50*50，以前是10*50，截图没有完成就退出了，造成截图失败；
    B：（已完成）切片的问题，录制时间写入文件标题不一致 => 已录制的文件信息需要在切片停止时也要对变量复位；
5.（已完成）播放页面：IE8以下的浏览器，需要判断浏览器版本，然后强制videojs使用flash进行http点播；
    A：（未完成）IE8或谷歌浏览器禁止flash的情况，需要事先检测是否有Flash播放器，没有的情况下如何处理；
    B：（未完成）需要在页面中加入判断是否安装了Flash播放器的情况，以及Flash播放器是否被禁用的情况，给出提示；
    C：（已完成）谷歌浏览器 => chrome://settings/content => 允许网站运行Flash

2017.07.30
=========================================================================
1.（已完成）采集端：处理玩监控模式下的录像切片问题，再处理采集端重连问题；（使用KeepAlive方式，在RemoteSession创建socket时加入）
2.（已完成）采集端：屏蔽了与网站时钟同步的代码，正式发布时需要打开；（在Debug模式下屏蔽，非Debug模式下打开）
3.（已完成）网站前端：根据模式状态标志字段，自由切换网站呈现的方式；
   A：（已完成）云录播模式，基本已经定型，需要完善云监控模式的呈现方式；
   B：（已完成）采集端：根据网站配置的类型，显示不同的标题名称，通道名称；将所有的动态参数放入CXmlConfig当中，不存盘，作为中转使用；
   C：（已完成）网站端：后台，左侧，隐藏“教学管理”；
   D：（已完成）网站端：后台，点播管理，去掉“科目、教师”，新增“所在通道”，修改页面，去掉“科目、教师、班级”，新增“所在通道、播放时长、录制时间”
   E：（已完成）网站端：后台，采集管理、直播管理，分别修改；
   F：（已完成）网站端：前台，云监控模式下的呈现形式，按照时移模式显示；
4.（已完成）网站前端，分为四个部分：
   A：HomeAction.php          => 云录播，PC端页面；同时，进行页面分发；
   B：MonitorAction.php       => 云监控，PC端页面；
   C：MobileRecordAction.php  => 云录播，手机端页面；
   D：MobileMonitorAction.php => 云监控，手机端页面；
5.（已完成）采集端：Gather表新增os_name（操作系统版本，记录采集端安装的操作系统）
6.（已完成）网站端：云监控模式下的页面呈现：
   A：（已完成）导航栏：首页 | 实时 | 采集器-1 | 采集器-2 | 采集器-3 | 采集器-4 | 采集器-5 | 更多   登录
   B：（已完成）首页：按通道显示录像内容，最多显示8个录像，需要考虑滚动加载问题，用layui实现；右侧还是“最新更新”和“点击排行”
   C：（已完成）实时：就一个栏目，按在线优先排列，采用流加载模式，一页16个通道；
   D：（已完成）采集器：跟实时类似，按通道排列，按gather_id筛选通道；
   E：（已完成）播放页面，第一个播放节点始终是“实时”内容，具体播放时，定位位置不同；播放左侧导航栏，会根据后台配置的按天或按通道显示不同内容；
   F：（已完成）播放页面，能够列举按天显示的列表，去掉后台配置的按天配置，自动在通道播放页面里面有按天显示列表，这样会更合理一些；
   G：（已完成）royalslider参考API文档 => http://dimsemenov.com/plugins/royal-slider/documentation/
   H：（已完成）play页面，针对相关通道，需要设置当前正在处理的通道页面，设置焦点，便于用户定位；
7.（已记录）数据库：通过SQL语句截取日期字符串格式：
    // 查找所有指定门店的办卡销售记录...
    //SELECT DATE_FORMAT(pay_time_end,'%Y-%m') month, SUM( total_price ) AS sales FROM wk_consume GROUP BY month
    $strField = "DATE_FORMAT(pay_time_end,'%Y-%m') month, SUM( total_price ) AS sales";
    $arrList = D('consume')->where($map)->field($strField)->group('month')->order('month DESC')->select();
    implode('\’,\'', array_column($arrMarks, 'days'));
8.（已完成）采集端：通道名称，默认加上通道在数据库里的编号，这样与后台统一；
9.（已完成）网站端：云录播模式的播放页面需要优化，跟监控模式的实现统一起来，但实现文件进行分离；
   A：（已完成）直播页面：加载全部通道，加入数据流加载功能，去掉按学校划分的模式；
   B：（已完成）播放页面：点播播放与直播播放统一起来；
10.（已完成）中转服务器：当php调用时，没有带mac_addr或者为空时，会崩溃退出；在transmit.c当中加强了mac_addr的有效性判断；
11.（已完成）采集端：通道全部由网站控制，网站后端可以控制通道的开启或关闭；
   A：（已完成）网站后端：对于在线的采集端，可以进行通道的开启和关闭操作；
   B：（已完成）网站后端：监控模式与录播模式的操作一致，不用特殊处理；
   C：（已完成）网站后端：采集管理 => 摄像头，管理，还没有完成；
   D：（已完成）网站后端：修正了IE8中的显示问题；
12.（已完成）网站后端：每个页面尽量显示记录总条数，显示在表格顶部；<span class="layui-breadcrumb">
13.（已完成）网站前端：【云录播】和【云监控】模式下，都可以默认为时移模式，就是将点播和直播结合起来，按课表，按时间排列，当前时间就是直播；具体页面形式可以参考浪弯的界面，改造我们自己的播放页面；
14.（已完成）定义监控模式下的运行逻辑，在监控模式下新增配置，采集端连接后需要获取：
   A：（已完成）主要是录像逻辑发生变化，切片间隔，录像方式；
   B：（已完成）切片时间10分钟，最大切片时间30分钟，最小1分钟；0表示不切片；
   C：（已完成）需要注意录像切片的衔接问题；要以关键帧为切片起始点，可以配置每个切片的交错方式，交错一个关键帧或2个关键帧，最大不要超过3个关键帧；默认1个；
   D：（已完成）切片交错方式不能用时间（秒）去处理，应该用关键帧更精确；
   E：（已完成）需要在后台配置中，新增：切片间隔时间默认10分钟（最小1分钟，最大30分钟），交错关键帧默认1个关键帧（最小1个，最大3个）；0表示不交错；
   F：（已完成）采集端：写入数据库的录制时间不应该是创建数据记录的时间，而应该是录像写盘时间，需要在录像文件中增加一个创建时间字段，这样时间才会更精确，跟后续的切片才能保持一致；
   G：（已完成）采集端：监控模式和录播模式，都需要新增一个录像文件字段：真实的录像创建时间，用这个时间写入数据库，而不是记录创建的时间；
   H：（已完成）切片时间是指系统流逝时间时间间隔，不是指的是已存盘时间，这一点需要注意，即：创建时间一定是切片间隔的累加；
   I：（已完成）切片时间，切片交错，都可以设置成0，表示不进行切片，不进行交错；
   J：（已完成）采集端：每隔3分钟，自动读取网站端的录像配置，这样就不用每次靠重启获取录像配置了；
15.（已完成）采集端：将摄像头设备与流转发统一起来，摄像头模式登录成功之后，自动启动一个rtsp流转发模式，这样就跟流转发模式融合在一起了，而不是以前那样单独处理；
   A：（已完成）摄像头模式只要登录成功，立即启动主码流的rtsp拉流过程，类型仍然是设备模式；
   B：（已完成）需要将摄像头模式和流转发模式的函数命令进行规范，便于将来查询方便；
   C：（已完成）Stream开头函数（流转发），Device开头函数（摄像头）
16.（已完成）采集端：修改监控摄像头模式下的录像方式：在线程录像时，需要注意切片问题，不要与拉流模式混在一起，单独处理；关键是切片衔接问题；
   A：（已完成）将存盘后的数据帧缓存起来，到达指定数量后，丢弃最老的关键帧数据；新切片产生时，先存储已缓存的数据帧；
   B：（已完成）采集端每隔3分钟会自动从节点网站读取录像切片和切片交错配置；

2017.07.22
=========================================================================
1.（已完成）网站端：将ThinkPHP从2.1升级到了2.2版本，修正了Bug和缓存优化；
   A：对比了3.0、5.0，变化一个比一个大，根据我们的需求，沿用2.2版本就足够了；2.2 => 3.2.3 => 5.0 => 每个都需要重写代码，完全不一样；
   B：本来是想通过升级到3.2.3，对mongodb的支持，结果发现mongodb非常不靠谱，我们的系统将来也完全用不上，果断放弃；将来可以考虑数据库集群解决数据库的问题；
2.（已完成）单音频、单视频的录像过程验证，目前还没有验证；音频有效性没有进行判断。单视频、单音频 的存盘都已经测试通过。
3.（已完成）采集端：输入数据只有视频时的处理，目前的处理没有问题，单独视频是可以进行处理的；
4.（已完成）采集端：单音频、单视频的处理验证，目前都没有问题，可以单独处理；
5.（已完成）校车监控的数据只有视频数据，但是无法回放，可能是H264的格式问题，需要进行录像数据分析验证；
   A：（已完成）直播端：写入3个sps/pps数据帧，HLS切片不能播放，rtmp可以播放；不写如3个数据帧，都不能播放；（发现是rtsp协议获取的SPS、PPS与数据区里面的不一致，造成无法播放）
   B：（已完成）采集端：录制的MP4文件，不能用html5播放；即使写入3个数据帧，也不能播放；（发现是rtsp协议获取的SPS、PPS与数据区里面的不一致，造成无法播放）
   C：（已完成）RTSP协议传递的数据帧都只有一个Nal单元，台湾采集卡的视频关键帧会传递多个Nal；（发现是rtsp协议获取的SPS、PPS与数据区里面的不一致，造成无法播放）
   D：（已完成）对myRTSPClient.cpp进行了改造，DESCRIBE、SETUP、PLAY，这些步骤只是存放信息，在获取到了实际数据帧里的SPS、PPS之后才进行推流线程准备工作，以前将准备过程放在SETUP、PLAY当中了；
6.（已完成）采集端：显示与服务器的连接状态信息；在状态栏显示“存储服务器”和“中转服务器”在线状态信息；
7.（已完成）网站端：点播管理可以删除指定的录像文件，数据库和实体文件一起删除；删除关联图片记录、删除关联视频记录，删除视频存储，删除图片存储；
8.（已完成）采集端：录像任务结束事件的判断有问题，开始时间超过当前时间，也无法结束，还在录像；
    A：（已完成）当前时间小于开始时间时，需要停止正在录像的任务，不管任务是否启动，都需要操作一下；
    B：（已完成）目前采用的是星期模式，日期不起作用，只有时间有意义，在采集端进行时间比较时，需要将时间解析出来，单独计算，不要去改数据库格式，改动太大；
    C：（已完成）测试不同星期的重叠时间段，测试当前时间大于结束时间，测试当前时间小于开始时间；
9.（已完成）采集端：也需要用getsocketopt的IPPROTO_TCP, TCP_INFO，获取连接状态(Linux)；因为，中转端已经发生错误断开，但采集端并没有收到，还以为处于连接状态。
    A：（已完成）Tracker连接，检测是否依然有效；windows当中没有TCP_INFO，使用KeepAlive，5秒无数据，开始发送，
    B：（已完成）Storage连接，检测是否依然有效；windows当中没有TCP_INFO，使用KeepAlive，5秒无数据，开始发送，
    C：（已完成）Remote连接，检测是否依然有效；windows当中没有TCP_INFO，使用KeepAlive，5秒无数据，开始发送，
10.（已完成）网站端：新增“存储访问配置”，就是用http协议访问存储的mp4文件，与fastdfs内部上传、同步机制是不一致的，需要单独配置，这也有利于存储与访问进行分离处理，demo.myhaoyi.com就需要用到；
11.（已完成）网站端：删除点播记录的分页问题；记录减少之后，分页不变的问题；
    A：通常使用laypage的场景都是整个页面刷新，不会遇到这种问题；但是，使用ajax刷新的就会遇到这个问题；
    B：解决办法：每次删除之后，动态计算一下实际的总页数和当前实际页面号，然后再重新加载laypage就可以了；
12.（已完成）网站端：需要通过后端网站可以直接删除指定的录像记录（包括截图和视频一起删除）

2017.07.13
=========================================================================
0.（已完成）myhaoyi：wk_node当中，加入节点服务器更多信息：节点类型、节点名称、节点IP地址；通过以下两种途径汇报信息；
   A：（已完成）节点网站：通过网站端注册汇报到服务器 => 汇报了 节点类型、节点标记、节点名称、节点IP地址 => LoginAction::login() => LoginAction::doWechatAuth()
   B：（已完成）采集端：通过采集端注册汇报到服务器 => 汇报了 节点类型、节点标记、节点名称、节点IP地址 => GatherAction::index() => GatherAction::verify()
1.（已完成）网站后端：wk_sysytem表中设置模式状态字段（0录播模式，1监控模式）
2.（已完成）采集端：每次启动时，获取模式状态标志字段；
3.（已完成）采集端：需要考虑连接中转服务器、连接tracker/storage的自动重连问题；因为，服务器可能会升级、重启，采集端无人值守时需要有断开自动重连功能；每隔5秒自动检测；
4.（已完成）网站端：根据网站类型修改网站相关信息；主要是修改前后端的页脚信息；
5.（已完成）IE8：当服务器时间与本地时间不一致时，IE8的cookie会失效，需要注意服务器与本地时间要保持一致或接近。
6.（已完成）非常强大的图表展示工具 => http://echarts.baidu.com/echarts2/index.html
7.（已完成）非常强大的日期时间工具 => http://www.jemui.com/uidoc/jedate.html
8.（已完成）Range设置成relative解决 => 在IE8下面初始化有问题，只显示一个；top 必须为 0px，而 IE8 下面计算有偏移量，不是0px；
    A：（已完成）设置成relative模式，只是表面解决，在进行拉伸操作时，还是出现问题；只能还原成 absolute 模式；
    B：（已完成）还需要找到 IE8 下面的调整方式；发现浏览器resize一下就能恢复正常；用动态创建模式，而不是静态的方式；因为必须从数据库读取；
    C：（已完成）range对象的编号问题，会造成删除混乱；解决办法：给每个range设置一个唯一编号，而且是全局唯一编号；
    D：（已完成）完全重写了录像任务的配置方式，变得异常强大。还需要写入、读取数据库，传递给采集端；
    E：（已完成）读取通道下面的所有记录，显示在界面当中；
    F：（已完成）删除区间，可以事先对已删除的区间做标记(全局记录)，再点击“全部保存”时，统一通知服务器进行统一操作；
    G：（已完成）复制区间，再全部保存，存在问题，因为，复制操作包含了删除动作，需要先解决删除的标记问题；
    H：（已完成）全部保存，存入数据库之后，需要返回数据库编号course_id，更新到区间的range对象当中，以便后续操作使用；
    I：（已完成）全部保存，新建的区间，需要返回3个信息：sliderID、courseID、rangeID，这样才能找到区间，然后赋值，又不影响已有的range编号机制；
    J：（已完成）注意：js当中的所有对象都是引用方式，对象传递参数时都是传值方式，变量都是传值方式；
    K：（已完成）删除区间，有四个地方：滚轮删除、点击删除、点击全部删除、复制时的删除，都需要调用删除事件，以便记录删除标记，点击“全部保存”时通知数据库删除；
    L：（已完成）全部保存，php转发命令到采集端，进行录像记录的 添加、修改、删除 操作；
    M：（已完成）是一次性将所有的录像记录通过转发服务器发送给采集端，需要注意缓存溢出问题，MAX_LINE改成了1024*64，需要重新编译transmit模块；
    N：（已完成）需要测试‘每周重复’任务录像的有效性，同时，需要更多的验证图表模式的任务录像有没有bug。
    O：（已完成）当新建了20个区间，点击“全部保存”按钮，会发生ajax错误，以前的ajax.error参数有问题，ajax.error(XMLHttpRequest, textStatus, errorThrown)
    P：（已完成）是由于 fastdfs_client.so 发送模块的缓存溢出造成的，需要增大缓冲区 1024*64 => 64KB，以前只有2KB；
9.（已完成）采集端：自动重连存储服务器，的逻辑有点问题，不能立即生效；在 OnSysSet() 调用 DelByEventThread ，这种方式可能存在问题，具体再看实际情况；
10.（已完成）中转服务器：需要有一个检测‘采集端’链接是否有效的处理，因为，采集端可能会中断后没有汇报，造成中转服务器上始终挂有一个链接，影响推流操作。
    A：只有采集端是长链接，其它连接都是curl的短连接；
    B：使用getsockopt的IPPROTO_TCP, TCP_INFO，获取连接状态；TCP_ESTABLISHED，表示正常连接，其它状态返回错误，删除连接；
    C：修改心跳检测时间为10秒钟，以前是30秒有点长；
    D：采集端的存储连接、远程控制连接都会每隔5秒就会自动检测，进行自动重连；
11.（已完成）网站后端：录像模块改进成图表模式，以周为纵轴，以24小时为横轴；录像任务就是节点；自由修改，一目了然；
12.（不着急）采集端：需要购买微软的数字签名，www.wosign.com，避免安装时报告未知的发行商的问题；
    A：取消发布者提醒：Win7 -> 开始 -> 控制面板 -> 用户账户 -> 更改用户账户控制设置 -> 拖到最下面，确定就好了。
    B：E:\GitHub\HaoYiYun\Install\SignTool\Readme.txt，有详细签名步骤，但是无效证书，需要购买；
    C：采集端改用Linux来解决，全部用网页控制，出两个版本，Windows版本和Linux版本，Linux版本用网页配置；
    E：iOS11开始wosign的授权被阻止，很多浏览器也不信任wosign的签名；
    F：去掉windows版本，只留linux版本，通过网页控制是大势所趋；


2017.07.12
=========================================================================
1.（已完成）将阿里云服务器上的网站进行整理，分配各个关联目录，并对每个站点做了不同的错误记录；
   A：（已完成）myhaoyi.com => 一级域名，指向 htdocs 目录，提供公司官网信息 => access_haoyi.log | error_haoyi.log
   B：（已完成）demo.myhaoyi.com => 二级域名，指向 demo 目录，提供云录播的演示网站 => access_demo.log | error_demo.log
   C：（已完成）monitor.myhaoyi.com => 二级域名，指向 monitor 目录，提供云监控的演示网站 => access_monitor.log | error_monitor.log
   D：（已完成）baby.myhaoyi.com => 二级域名，指向 baby 目录，记录所有陪孩子玩耍、旅行、成长记录 => access_baby.log | error_baby.log
   E：（已完成）收集网上陪孩子玩儿的资料，整理、收集、归类，本地路径（E:\GitHub\HaoYiYun\Document\WEB\baby）；现在先放到 happyhope.net.cn，以后放到 baby.myhaoyi.com 上去。

2017.07.05
=========================================================================
1.（已完成）为了配置将来的双https域名演示，将阿里云服务器全面升级，安装了全功能版本软件：
   A：（已完成）srs：汇报机制可以用二级域名demo.myhaoyi.com，绕过https，仍然使用目前的http模式；但是，需要排除内网地址 => 10.29.179.147
   B：（已完成）tracker、storage、php_client，都设置成外网地址 => 118.190.45.238，否则，采集端无法上传；
   C：（已完成）注意开放端口：22122、23000、21001、8080、1935
2.（已完成）采集端：mp4录像，当用文件做为数据源，直播后，再录制成mp4文件，这时H5的播放出现视频有节奏的卡的现象，或许是音频没有计算时间戳的原因，需要进行实验，同时，多源测试。
   A：（已完成）采集端：硅谷第四季的视频，录制之后，html5播放时，一顿一顿，估计是录像时的时间戳的写入方式有问题造成的。用其它播放器播放是正常的。
   B：（已完成）音频计算帧间隔，而不是使用固定的1024，结果 => 跟音频没有关系，即使只clone视频通道，转录的mp4文件也会发生卡顿现象，原始文件则不会；
   C：（已完成）LibMP4-audio.h可以让音频也用计算时间差的方式存盘；PushThread-mp4.cpp可以直接转录mp4文件，只录制视频，仍然卡顿，以后有空再来处理；
   D：（已完成）有可能是视频帧的 PTS 与 DTS 的问题，存在偏差，未修正？这个需要进一步研究；跟 ctts 这个 box 有关，就是composition time，时间差，但不能直接计算，必须单独保存，单独传递；
   E：（已完成）compositionTime(CTTS) = PTS - DTS => compositionTime = (PTS - DTS) / 90.0 
   F：（已完成）MP4V2::MP4ReadSample()有一个容易忽略的参数，RenderingOffset，就是它记录了compositionTime，读取之后，需要传递给 MP4V2::MP4WriteSample()，也有一个 RenderingOffset
   G：（已完成）但是，在直播时，这个 RenderingOffset 或 compositionTime 没有传递给 srs，导致 Flash 播放时有顿挫感（就像帧率不够一样），HLS 播放时一卡一卡的。
   H：（已完成）另外，好像每一个视频帧都记录了自己应该播放的时间，所以外围怎么设置都不起作用，现在，已经明确 RenderingOffset 如何传递给 srs，或对每帧的时间戳进行修正？
   I：（已完成）CPushThread::SendVideoDataPacket()，发包组帧时，专门有 composition time 的选项设置，这里使用真实时间，还是TimeScale时间？(只要与sendTime的格式一致就行，因此，直接给毫秒时间戳)
   J：（已完成）composition time，目前只处理了mp4文件，对于拉流数据，如何处理 composition time，还得继续研究；
   K：（已完成）拉流对象 LibRtmp::doVideo() 当中，有一个抹掉 5 字节外壳的过程，在那 5 字节当中，就有 composition time，需要解析出来，投递到下面的操作当中。1+1+3
   L：（已完成）到目前为止，完全搞定了文件MP4的直播、转发、录像、回放，等等一系列问题，对于多流文件，还可以考虑选择哪路流进行直播；
3.（已完成）采集端：系统设置，当Web地址发生变化时，提示，需要重启才能生效，不重启生效的方式，会造成系统混乱，崩溃。
4.（已完成）采集端：通道配置完毕之后，直接运行，减少点击运行这个步骤；
5.（已完成）公司官网：购买一个网站模版，改造成自己需要的简洁大方模式，增加一些简单好看的动画功能，使用阿里开放的动画模块；参考bootstrap提供的模版，参考豆瓣电影的模版；
   A：（不适合）从 http://expo.bootcss.com/ 寻找一个类似与豆瓣电影的模版（太复杂，没头绪，无从下手）
   B：（已完成）设计网站结构，准备文案，编写网站，填充内容；
   C：（不适合）使用 https://github.com/hiloteam 绘制动画，让网站更生动，主要做游戏的，不适合，完全引入另一个方向。
   D：（已完成）决定选用 fullPage.js 作为核心框架 => https://github.com/alvarotrigo/fullPage.js，中文帮助 http://www.dowebok.com/77.html
   E：（已完成）公司主页面用fullPage.js搭建，总体要给人简单清新的感觉，鼠标滚动翻页，有菜单导航，进行更丰富的信息展示，刚开始没有的话，可以简化。
   F：（已完成）<!DOCTYPE html> 这行代码很重要，否则 IE8 下面页面混乱，前端和后端的 header.html 里面都有这行代码，所有没问题；
   G：（未完成）演示网站分两部分 => 云录播 和 云监控，代码是一样的，设置不同，分为两个域名，两个目录，两个数据库；
   H：（已完成）绘制一张基本架构图，说明系统架构；完全由css+html绘制；
6.（已完成）网站端：需要将myhaoyi改造成https，微信小程序也需要；
   A：（已完成）登录阿里云 => 控制台 => 证书服务 => 购买证书，参考 => https://ninghao.net/blog/4449，在下载栏有详细说明，配置需要添加对php的支持；
   B：（已完成）nginx，需要加入 --with-http_ssl_module 编译参数，让 nginx 能够支持 https，nginx.conf需要针对443端口进行配置；
   C：（已完成）需要打开防火墙，对443端口开放，同时，为了全站使用 https，需要开启301重定向 => return 301 https://$host$request_uri;
   D：（已完成）网站前后端，登录链接需要修改成 https 模式，浏览器内核天生就支持 https ，因此，不受影响，但是，网站最好强制使用https模式；
   E：（已完成）采集端，注册连接myhaoyi.com时，需要修改成 https 模式；编译目录 => E:\GitHub\HaoYiYun\Document\WEB\curl
   F：（已完成）windows下的libcurl支持https太费劲，参考 => http://blog.csdn.net/neverup_/article/details/21961017；
   G：（已完成，未启用）将myhaoyi.com和ihaoyi.cn都同时绑定到阿里云服务器上，可以提供两个域名的https访问，需要申请两个证书；两个域名都需要备案成功才能申请。
   H：（已完成）编译参考 => http://www.jianshu.com/p/d40e249774ff
7.（已完成，未启用）网站端：可以设定微信登录时的界面参数，方便调试和管理，前提是把网站设置成 https 模式；(实验成功，未启用）
8.（已完成）演示端：将所有的部件装到MacBookPro的虚拟机上（CentOS6.8），不必使用多个树莓派搭建演示服务器，Linux版本的采集端延后开发； 
9.（已完成）存储端：尝试把 tracker/storage 装在同一台机器上，关键点在 nginx 需要将 扩展模块 和 缓存模块同时编译，需要打包一个新的全功能 nginx（并在build当中新建了打包模块）
10.（已完成）测试机：将MacBookPro装一个虚拟机，安装CentOS6.8版本，最小安装 Minimal(总共347个模块，支持中文环境)，再安装一个Win7虚拟机，全模拟。
     A：网络选桥接模式。帐号 => root:huijia264，MacBookPro的WiFi有点慢，用网线快很多，也可能跟目前2个WiFi级联有关；
     A：网络选桥接模式。帐号 => MacBook:huijia264，Win7 - 32位
     B：nginx-storage => 编译带ssl功能的版本 => --with-http_ssl_module
     C：nginx-tracker => 编译带ssl功能的版本 => --with-http_ssl_module
     D：nginx-all => 编译带ssl+cache+fastmodule的全功能版本
     E：安装 php-5.6.30  => OK
     F：安装 mysql-5.5.3 => OK
     G：安装 transmit-1.0.1 => OK
     H：安装 srs-2.0.243 => OK
     I：安装 tracker-5.0.9 => OK
     J：安装 storage-5.0.9 => OK
     K：安装 nginx-all-1.10.2 => OK
     L：安装 htdocs => 网站代码 => 修改权限等等
     M：需要修改 IP 地址的地方如下：
       /weike/srs/conf/srs.conf => web_addr 192.168.1.xx; => 重启 srs
       /etc/fdfs/client.conf => tracker_server=192.168.1.xx:22122 => 重启 php
       /etc/fdfs/storage.conf => tracker_server=192.168.1.xx:22122 => 重启 storage
       /etc/fdfs/mod_fastdfs.conf => tracker_server=192.168.1.xx:22122
     N：修改 wk_system 有关 tracker（192.168.1.xx:22122） 与 transmit（192.168.1.xx:21001）的地址和端口；
     O：测试重启，下面需要测试 采集端注册、录像、上传、直播，网站播放点播、播放直播，满足一台机器完成所有工作的要求；
11.（已完成）IE8 观看直播时，会直接造成 srs 崩溃，造成整个通道中断（原因是 IE8 会发送两次播放指令，造成重复创建对象，StreamStartLivePush）
12.（已完成）网站端：通过中转服务器查询时，需要注意：有记录才查询，否则会出现卡死情况；AdminAction::pageCourse()
13.（已完成）采集端：正在录像的任务直接删除时，会造成存放到数据库的记录无法找到录像任务，而无法获取录像对应的老师和科目信息。（设置默认的subject_id和teacher_id都为1，避免前端无法显示的问题）
14.（已完成）网站端：在直播管理中，可以加入状态信息了，因为，直播通道的状态信息已经写入了数据库当中；
15.（已完成）直播端：可以让srs和nginx-rtmp通过on_publish回调进行用户名和密码验证，修改了srs的源码，nginx-rtmp直接支持，详见《浩一监控技术总结.doc》
16.（已完成）将可能用到的工具或代码专门放到 E:\GitHub\HaoYiYun\Tools 目录下，以便后续使用，也方便维护：
    A：Tools\newSlider => 用于任务录像的时间段设置，可视化界面操作，仿海康后台录像任务模式；

2017.06.15
=========================================================================
1.（已完成）网站后端：支持 IE8 访问；
    A：（已完成）需要解决 IE8 总是读取 ajax 缓存的问题，每次给一个无意义的随机数，告诉 IE8 是新的请求，而不是缓存；
    B：（已完成）$.ajaxSetup({ cache:false });每次ajax调用之情，强制不要读取缓存；
    C：（已完成）event.stopPropagation()，IE8不能支持，需要封装 => stopPropagation(event)
    D：（已完成）需要将 jquery 降级为 1.12.4，jquery2.0以上版本都不支持IE678
2.（已完成）网站端：在用户使用微信登录时，需要附带一个节点服务器的唯一识别码，让中心服务器记录用户来源，便于节点管理用户，需要注意用户迁移；
    A：（已完成）将前后端登录处理集中在一起，不要分开处理，便于将来的调试或升级；
    B：（已完成）节点网站端，新增节点标识字符串，用于网站唯一标识。
    C：（已完成）采集端，更改验证授权过程，采集端 => 注册(节点) => 授权(中心)
    D：（已完成）节点网站端，采集端注册时会验证 web_tag 是否存在，不存在，生成一个；
    E：（已完成）微信扫码登陆时会验证 web_tag 是否存在，不存在，生成一个；需要前后端分别测试；
    F：（已完成）节点网站端，用户列表接口，需要传递 web_tag 标记，进行用户筛选；
3.（已完成）网站端：将用户管理、用户赋权，都交给本地网站服务器，中心服务器只做简单记录和采集端授权服务；
    A：（已完成）节点网站，新增wk_user表；
    B：（已完成）中心网站，屏蔽了用户信息获取接口，所有数据都是通过采集端在登录时汇报，通过用户在登录时汇报；
    C：（已完成）节点网站，所有用户数据获取都通过本地数据库，不用通过接口获取，加快了访问速度，增强了用户体验；
4.（已完成）系统软件：http://www.itellyou.cn/，里面有全部未经修改的 Windows 各种版本，office，等等；

2017.06.13
=========================================================================
1.（已完成）采集端：curl连接网站时，加入5秒超时机制，这样在退出时速度快；
2.（已完成）采集端：去掉世纪葵花的默认信息，换上 北京浩一科技 的信息；
3.（已完成）采集端：验证过期、网站注册，显示文字更加人性化；

2017.06.12 => 解决 php 阻塞 slow.log 的问题
=========================================================================
1.（已完成）网站前端：HomeAction.php里面，去掉通过中转服务器获取通道状态的代码，改成通道自己汇报状态，避免频繁刷新造成的堵塞问题；
   A：（已完成）wk_camera中新增字段 status => 0(离线) 1(运行) 2(录像)
   B：（已完成）采集端在注册汇报通道时，重置 status 状态为 0(离线)，命令 => kCmd_PHP_Get_Camera_Status
   C：（已完成）采集端退出时，汇报 logout 事件，将采集端下面所有的通知状态设置为0；
   D：（已完成）通道运行时汇报，通道停止时汇报。
   E：（已完成）网站前端获取通道状态的代码，修改为直接从数据库读取，而不是目前的从采集端读取，避免php堵塞的可能性；
   F：（已完成）网站后端获取通道状态的代码，修改为直接从数据库读取，而不是目前的从采集端读取，避免php堵塞的可能性；
2.（已完成）网站前端：HomeAction.php里面，改进获取直播连接代码，不要等待采集端上传成功才返回，直接返回rtmp播放地址，让播放器自己去处理等待；
   A：（已完成）中转服务器：修改 kCmd_Play_Login 代码，不要延迟发送播放地址，而是通知采集端之后，直接返回 rtmp 地址...
   B：（已完成）采集端：收到 kCmd_Play_Login 命令，直接进行判断处理，无需再次转发命令给中转服务器，减少中转服务器等待时间；
   C：（已完成）网站端：需要事先从数据库中判断一下通道的状态，如果 <=0 就不要连接终站服务器了；
3.（已完成）代码管理：将所有的代码都上传到GitHub上面，需要重新做一个规划，这样不依赖本地的cvs服务器，而且还能随时看到修改变化情况，随时上传；
4.（已完成）代码管理：git 提交的意思是提交到本地代码库，git 推送的意思是上传到 github 服务器。
5.（已完成）代码管理：参考链接 => http://blog.csdn.net/top_code/article/details/50241999

2017.06.10
=========================================================================
1.（已完成）直播端：用 SRS 替换 nginx-rtmp，需要完成如下的工作：
   A：（已完成）新增WebAddr|WebPort配置 => 配置文件比 nginx-rtmp 简单很多倍；
   B：（已完成）在启动|关闭中加入curl汇报机制 => 单线程模式，非常简单 do_cycle()；
   C：（已完成）在某个通道上的用户减少到0时汇报停止上传 => 在专门的统计模块中加入；
   D：（已完成）打包成rpm包 => 就差最后一步，调整播放器之后加入；
   E：（已完成）SRS服务器，无法用 librtmp 获取数据，这样造成拉流无法实现，修改推拉流的代码，使用SRS提供的librtmp；
   F：（已完成）需要使用 SRS 提供的 librtmp 来实现拉流；
   G：（已完成）需要使用 SRS 提供的 librtmp 来实现推流；
   H：（已完成）./configure --export-librtmp-single=./single，输出 librtmp ，需要写程序来验证拉流和推流操作；
2.（已完成）采集端：SRS 当中使用 gop_cache on 模式速度最快，但是会花屏，原因是在上传时第一帧插入的关键帧不是后面数据需要的关键帧；
   A：需要对非 IPC 的数据流进行上传方式调整，上传的数据永远是第一帧是关键帧，不是插入的关键帧。
   B：PushFrame => 累加关键帧，大于3个时，删除第一个关键帧（包括第一个关键帧和第二个关键帧之间的所有帧，包含音频，减少关键帧计数器）
   C：SendOneDataPacket => 没发一个包就另存起来，当发现是视频关键帧时，清空另存的缓冲区，减少关键帧计数器；
   D：BeginSendPacket => 发送数据开始前，得到第一个数据包（关键帧）的发送时间，以便发送时从0开始计时；
   E：EndSendPacket => 发送连接断开之后，需要将缓存数据放入发送队列当中，目的是弥补正在发送的数据没有关键帧的问题，把已经发送的数据找回来。
3.（放弃）播放器：准备使用 JWPlayer 的开源版本，videojs的播放器直播效果不好；
   0：不是 videojs 的效果不好，而是上传端的处理有问题，另外 jwplayer 太复杂，而且功能好多是封闭的；
   A：PC端移动端 Html5 播放 MP4 文件；
   B：PC端使用 Flash 播放直播；
   C：移动端使用 HLS 播放直播；
   D：PC端能够进行切片链的播放，也就是无缝播放多个mp4文件，时间戳累加显示，并能将每一个片段播放完毕的通知传递出来；

2017.06.06
=========================================================================
1.（已完成）网站登录：有安全漏洞，从历史连接中可以任意登录，解决方法如下：
   A、需要在登录连接中加入一个标识符号（时间戳），传递给登录服务器；
   B、登录服务器处理成功之后，原样返回标识符号（时间戳）；
   C、本地服务器会验证这个时间戳，在30秒之内都算正常，超过30秒，连接就无效了；
2.（已完成）世纪葵花：终止了与世纪葵花的合作，冻结目前的版本。最终以6.6日上传的CVS版本为准；
   A、FastDFS里面的版本已6.3日的为准；
   B、htdocs没有编译，到时候需要时再编译；
   C、HaoYiYun.exe在Win7下启动失败；是由于登录用户的权限无法创建文件，只能建目录。

2017.06.04
=========================================================================
1.（已完成）myhaoyi：新增采集端汇报机制，记录采集端信息，控制采集端的运行；
2.（已完成）网站后端：新增用户管理，可以调整用户的类型 => 管理员 | 用户；
3.（已完成）网站前后端：普通用户登录后不能跳转到后端，只有管理员才能登录网站后端。
4.（已完成）网站后端：解决php调用curl反馈慢的问题。（下面的方法似乎有点作用，不能明确到底有没有作用）
   A、curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0); //强制协议为1.0
   B、curl_setopt($ch, CURLOPT_HTTPHEADER, array("Expect: ")); //头部要送出 Expect: 
   C、curl_setopt($ch, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4 ); //强制使用IPV4协议解析域名

2017.06.01
=========================================================================
1.（已完成）网站登录成功后，通过接口展示用户登录信息；区分管理员和普通用户（是由myhaoyi.com验证后传递信息）
   管理员标识：55C8363B-A6A9-41B7-A50D-8033BB62BD30
   普通人标识：DCA3D37F-205A-4F62-9E20-B3E0948CB371
2.（已完成）将用户体系搬迁到 www.myhaoyi.com 上去；
3.（已完成）www.myhaoyi.com的代码整理到GitHub上面，存放目录 => E:\CVSKHStream\HaoYi\GitHub
   GitHub\htdocs => 网站代码
   GitHub\Source => 采集端代码   
4.（已完成）将阿里云的CentOS升级到6.8最新版本，造成php-5.2.14的curl崩溃，升级php-5.6.30解决了问题，重新编译php-5.6.30遇到很多问题，详见readme.txt，并打包成php-5.6.30-1.x86_64.rpm

2017.05.26
=========================================================================
1.（已完成）下面进入用户管理阶段，使用微信扫码登录（专门的第三方网站代码），用户数据存放到第三方网站上，每一个云录播系统都是通过PHP接口来获取用户登录信息，设置cookie等等。
   以往，所有访问数据库的地方，都需要换成接口函数（这个接口函数会调用第三方远端的PHP代码，返回json数据包），网站启动时，必须先检测第三方接口是否有效，然后才能工作。
2.（已完成）首先，需要完成登录和退出的操作，在登陆后台的时候，参考happyhope.net的方法。
3.（注意）chrome浏览器不允许跨域操作iframe的document对象。
4.（网络邻居）本地连接--双击属性--ipv4--高级--netbios，开启后，可以用机器名ping通。
5.（已完成）解决了网站登录的数据交换的模式设计，可以将所有的用户登录请求都集中到haoyi.com当中，现在需要进一步的封装，同时需要注意考虑一些安全问题。
7.（已完成）微信登录页面，能够区分是前端登录还是后端登录；登录成功后，还能自动跳转到登陆前的页面，使用了cookie。
8.（已完成）网站用户管理服务器，微信扫码登录成功后，将用户信息存放或更新到数据库当中。
9.（已完成）网站用户管理服务器，第三方网站可以通过接口访问用户信息，请求所有与用户相关的信息。
10.（已完成）网站用户管理服务器，所有接口函数都返回json数据包，格式如下：
   err_code => true/false => 判断访问是否成功...
   err_msg  => 发生错误时的错误描述信息...
   data     => 具体返回的数据，通常是json数组...
11.（已完成）中转服务器：存在重大问题，transmit_command会造成卡死现象，需要尽快跟踪解决，否则，会造成网站整体效率降低。
   备注1：是由于对epoll的机制不熟悉，发送数据包必须注册发送事件才能执行，而不是在接收事件里面执行发送过程，这种思路是来自windows的处理过程。
   如果不按照这种方式进行，就会出现多个链接发生混乱的情况；先发起EPOLLIN（read），处理Read，缓存发送数据，发起EPOLLOUT（write），处理Write，发起EPOLLIN（read）
   备注2：正在的原因是ET模式事件只通知一次，在accept时将同时到达的链接丢弃了，造成混乱，因此，需要在accept处进行循环读取同时到达的链接。
   备注3：在调试的过程中找到了一种更为简单的通信机制：使用php的socket直接跟transmit通信，这样避免了维护非标准的扩展插件的麻烦。
   备注4：为了性能和效率，还是采用插件模式比较好，php的socket模式，性能和效率比较低。

2017.05.25
=========================================================================
1.（已完成）直播端：直播服务器在退出前，需要汇报中转服务器，自己退出了。（可以实现精确控制，利用nginx的模块机制实现）
   增加 ngx_rtmp_exit_process 进程退出处理函数
2.（已完成）直播端：直播服务器启动之后，需要每隔一段时间就链接一次中转服务器，汇报地址，可以不断延长汇报时间。
   增加 ngx_rtmp_live_timer 时钟处理函数；同时，ngx_modules.c中，需要把ngx_events_module和ngx_event_core_module放到ngx_rtmp_module之前，否则，时钟不起作用。

2017.05.17
=========================================================================
1.（已完成）只有一种方法读取SPS里面的视频宽度和高度 => CSPSReader，另一种BitReader.h的方法有问题，已经删除了。
2.（已完成）数据流的超时判断，不要放在发送线程，而应该放在拉流部分（接收数据部分）
3.（未完成）后期可以在界面层显示出接收数据层多少秒没有数据了，可以显示超时自动断开倒计时。
4.（已完成）断开自动连接的优化和处理，将所有模式的自动重连优化一下。
5.（已完成）网站端：编辑模式下的面包削功能。
6.（已完成）中转端：需要解决中转服务器掉线的问题。（网站后端能查看状态）
7.（已完成）直播端：需要解决直播服务器掉线的问题。（网站后端能查看状态）
8.（已完成）网站端：新增直播管理，使用弹出框修改通道信息；
9.（已完成）网站端：新增点播管理，使用弹出框查看视频信息；
10.（已完成）网站端：将大量的编辑、添加功能，用弹出框重写，增强用户体验；
11.（已完成）网站端：完善列表编辑，选中、编辑过程，新增浅蓝色背景框。
12.（已完成）存储端：需要考虑同一分组下多个storage的情况，多个分组下不同storage的情况。
13.（已完成）存储端：挂接的硬盘有问题，没有把所有的硬盘挂接上去，跟手动安装系统有关，需要设置多个挂接点。
df -h
mkdir -p /home/storage
ln -s /home/storage/data /home/storage/data/M01 => 内部已经建立了M01关联，这里需要手动建立软链接。
vi /etc/fdfs/tracker.conf => 修改tracker配置
   store_path=2           => 每次写盘找剩余空间最大的目录
vi /etc/fdfs/storage.conf
   store_path_count=2
   store_path0=/fdfs/storage
   store_path1=/home/storage
vi /etc/fdfs/mod_fastdfs.conf
   store_path_count=2
   store_path0=/fdfs/storage
   store_path1=/home/storage
   [group1]
   group_name=group1
   storage_server_port=23000
   store_path_count=2
   store_path0=/fdfs/storage
   store_path1=/home/storage
vi /weike/nginx/conf/nginx.conf => tracker下的nginx
   location ~/group1/M[00-01]
vi /weike/nginx/conf/nginx.conf => storage下的nginx
   location ~/(group[1-3]/M01/)(.+)\.(jpg|png|gif)_([0-9]+)x([0-9]+) {
     root /home/storage/data;
     ngx_fastdfs_module;
     ......
   }
   location ~/group[1-3]/M01 {
     root /home/storage/data;
     ngx_fastdfs_module;
   }

2017.05.09
=========================================================================
0.（已完成）建立一个专门的rpm目录
1.（已完成）Linux：tracker-5.0.9-1.x86_64.rpm
2.（已完成）Linux：nginx-tracker-1.10.2-1.x86_64.rpm
3.（已完成）Linux：storage-5.0.9-1.x86_64.rpm
4.（已完成）Linux：nginx-storage-1.10.2-1.x86_64.rpm
5.（已完成）Linux：php-5.2.14-1.x86_64.rpm
6.（已完成）Linux：mysql-5.5.3-1.x86_64.rpm
7.（已完成）Linux：live-1.12.0-1.x86_64.rpm
8.（已完成）将cvs目录进行整理完善。

2017.05.07
=========================================================================
1.（已完成）phpMyAdmin：点击数据库时，会造成 php-cgi 占用CPU100%的问题，是访问session_start时造成的，但是原因不明，需要使用源代码进行调试；（是由于机器过热性能降低导致）
2.（已完成）采集端：新增添加通道功能，可以添加 rtsp/rtmp/mp4 形成新的通道；
3.（已完成）采集端：完善自动连接DVR，显示错误信息，不要完全中断，只中断那些密码错误的通道；
4.（已完成）网站端：完善直播管理、录像管理；
5.（未完成）采集端：需要对录像的tmp文件进行处理，当异常关机时，可以进行数据恢复。

2017.04.28
=========================================================================
1.（已完成）直播端：完成nginx-rtmp的改造，能够反馈信息到采集端。
2.（已完成）PHP扩展：需要专门给直播端编写一个专用接口，专门用来与中转服务器传递数据用，都是单向的：直播端向中转服务器传递信息，不需要中转服务器反馈信息。
3.（已完成）中转器：中转服务器会记录直播端服务器列表IP:PORT，采集端在获取直播端地址之后，一旦发现链接失败，就需要通知中转服务器删除这个无效的直播端。
4.（已完成）直播端：需要新增网站地址和端口的配置，一旦启动需要不断尝试链接网站端口，汇报本机的IP和服务端口给中转服务器。
5.（已完成）直播端：一旦有用户接入或退出直播端，用户数发生变化时，直播端需要把用户数汇报给中转服务器，再由中转服务器根据当初哪些采集端获取过直播地址和端口，再将用户数转发给这些采集端。采集端会根据用户数的情况判断是否需要断开上传。
6.（已完成）直播端：用户点击直播播放页面时，PHP扩展会通过中转服务器通知到对应的采集端，采集端顺便会接收到一个直播端地址和端口。直播播放器会一直处于等待反馈状态。采集端会根据拿到的直播地址和端口，尝试去上传直播，上传直播成功，反馈结果给中转服务器，中转服务器在回应给PHP，PHP将结果反馈给用户，直播播放器停止等待，显示结果。如果采集端上传成功，用户播放器就会链接直播链接，这个直播链接是采集端反馈给用户的。因此，Camera表中，可以不用增加记录直播链接的字段，可以在中转服务器中动态存在。
7.（已完成）直播端：播放器点击直播频道的时候就已经确定了Gather的定位，因此，可以由transmit来进行直播流量的分发。
8.（已完成）下面进入测试阶段，利用PHP代码测试，live-server还需要进行代码修改，主要是利用curl调用php接口，还有就是新增网站配置。
9.（已完成）PHP扩展：改进接口，只留下transmit_command一个数据接口，修改参数，将MAC地址放入saveJson当中。
   A: array  transmit_connect_server(string ip_addr, int port)
   B: bool   transmit_disconnect_server(array & serverInfo)
   C: string transmit_command(int type, int cmd, array & serverInfo, string saveJson)
10.（已完成）直播服务器：发现用户连接上到达0，直接终端直播上传就可以了，无限通过中转服务器汇报。
11.（已完成）直播服务器：只需要不断汇报用户数编号就可以，中转服务器无需中转给采集端知道；
13.（已完成）直播服务器：用户数增加、用户数减少、直播断开都需要汇报给中转服务器，通过curl实现。
14.（已完成）直播播放器：需要让采集端知道有新用户请求直播，中转服务器转发给采集端命令，只要没有上传链接，直接上传。将上传结果回应给中转服务器，中转服务器再回应给播放器。
15.（已完成）ngx_rtmp.h、ngx_rtmp_cmd_module.c、ngx_rtmp_core_module.c
16.（已完成）ngx_rtmp_live_module.c => ngx_rtmp_live_play | ngx_rtmp_live_close_stream

2017.04.26
=========================================================================
1.（已完成）Web端：进一步完善后台，能够进行录像任务的添加、删除、修改操作。
2.（已完成）Web端：后台操作录像任务，自动录像、自动上传、自动显示。

2017.04.23
=========================================================================
1.（已完成）配置：还有一些配置放置在《阿里云 - 浩一.txt》当中。
2.（已完成）PHP扩展：新增3个函数，用于transmit交互过程：
   A: array  transmit_connect_server(string ip_addr, int port)
   B: bool   transmit_disconnect_server(array & serverInfo)
   C: string transmit_set_command(int cmd, string gather_mac, array & serverInfo, string saveJson)
3.（已完成）PHP扩展：编译命令
   A: /weike/php/bin/phpize
   B: ./configure --with-php-config=/weike/php/bin/php-config
   C: rsync -e'ssh -p 1012' -a modules/fastdfs_client.so root@192.168.1.180:/weike/php/ext
4.（已完成）PHP扩展：可以实现PHP网站对录像课程表的 添加、修改、删除 操作。 

2017.04.13
=========================================================================
1.（已完成）Web端：新增wk_system系统表，存放一些配置信息
2.（已完成）Web端：tracker地址，统一在web端设置，采集端启动时需要从web端获取一些配置信息，而不是单独自己设定，设置都是从一个地方统一设置，就是web端。
3.（已完成）PC端：可以根据远端设定的课表内容录像，不要采用切片方式录像。
4.（已完成）Web端：www.myhaoyi.com，已购买阿里云主机，域名指向 118.190.45.238，还需要备案，申请微信开放平台，可以用微信扫描登录。
   用户信息记录在www.myhaoyi.com当中。所有的交互通过php传递json数据完成。将来的微信支付也在这里完成。实现用户和数据分离。
5.（未完成）PC端：新增查看远程上传列表按钮（PHP） - 完善状态栏内容，响应每个按钮的处理事件。
6.（未完成）Web端：由于mp4录像是切片，需要js/flash支持mp4的列表播放，从而支持大量的长时间播放。需要研究videojs的切片播放功能，以及swf的列表播放。
7.（需注意）Web端：目前131本地是windows版本的php/nginx，在编码方式上存在混乱，会造成layui乱码，不要理会，在linux环境下没有问题。
8.（已完成）Web端：如何解决课表运行状态问题：除了PC采集端汇报以外，每次进行php页面刷新时需要反向查询状态，通过ajax反向查询PC采集端。同样的方法适用于Gather页面，Camera页面。
   注意：状态信息不要记录到数据库当中，而是从PC采集端动态获取的，这样更有时效性，而不用处理一些复杂的状态管理问题。
9.（已完成）Web端：下面进入最后的复杂环节：Web命令中转环节，在php中升级fastdfs模块，让它能够链接中转服务器，向PC采集端发送命令。
   注意：命令中转服务器放置在Tracker上，PC端需要先直接连接网站获取录像任务，放在内存当中；网站录像课程有变化时，通过php方向设置到PC端上进行更新。
   注意：命令中转服务器名称：myTransfer，监听端口：21001，安装在Tracker服务器上，先要调试好稳定性，修改那个写狗工具。
   注意：交互的命令格式参考FDFS，协议包由两部分组成：header和body
   header共12字节，格式如下：(为了字节对齐，设置成4的整数倍)
         4 bytes body length => int
         4 byte client type  => int
         4 byte command id   => int
         4 byte php sock id  => int
        20 byte gather mac   => char
   body数据包格式由取决于具体的命令，都是json数据包格式。
10.（已完成）PC端：修改配置，不要设置Tracker地址，从网站获取。
11.（已完成）PC端：所有的通道配置，都通过网站反向设置，这样可以统一起来，不用来回折腾。
    A: 需要先完成中转服务器架构：transmit.c => g++ -g transmit.c -o transmit -ljson => -g 表示带调试 => valgrind-3.12.0 内存泄露检测工具
    B: 内存泄露检测工具使用 => valgrind --tool=memcheck --leak-check=full --show-reachable=yes ./transmit
    C: 完成采集端CRemoteSession的框架搭建，主要用来接收transmit转发PHP发送的指令，并做出相应的操作，相当于后门一样。 
    D: 需要完成fastdfs-php扩展模块的改造，使之能够与transmit进行通信，并直接得到或者设置gather的信息。
12.（已完成）PC端：注册通道时，还需要获取通道名称，如果是新建通道则不需要。采集端通道名称设置为只读模式，通过mac地址进行识别。
13.（已完成）PC端：注册通道时，还需要获取该通道下的所有的录像课程表。（课表修改时，也需要进行反向设置）
14.（已完成）PC端：需要和网站服务器的时钟进行简单同步。

2017.04.12 - 开始后台网站框架的搭建，使用 layui => https://www.layui.com/doc => https://www.layui.com/demo
=========================================================================
1.（已完成）Web端：网站可以配置录像课表，保存并通知对应的采集端，更新存放在内存中的新课表，调整录像。
2.（已完成）Web端：网站后台的搭建，左右分列栏，进行大量的窗口操作。 
3.（已完成）nginx的配置中需要进行修改：
   location /admin {
     rewrite ^/(.*)$ /wxapi.php/Admin;
   }

2017.04.10 - MP4录像存在问题
=========================================================================
1.（已完成）PC端：海康摄像头录制的MP4文件：通过GMPullerX录制
  A：Windows端 => HTML5的video标签 => 不能播放；=> 由于写入了sps/pps等3个很短的数据帧，造成video标签报错。通过MPlayer播放器发现的。
  B：Windows端 => videojs-swf =>可以正常播放，不用全部下载完毕；=> 由于写入了sps/pps等3个很短的数据帧，造成video标签报错。通过MPlayer播放器发现的。
  C：MacOS端   => HTML5的video标签 => 不能播放；=> 由于写入了sps/pps等3个很短的数据帧，造成video标签报错。通过MPlayer播放器发现的。
  D：MacOS端   => videojs-swf => 可以正常播放，但是要全部下载完毕。=> 由于写入了sps/pps等3个很短的数据帧，造成video标签报错。通过MPlayer播放器发现的。
2.（已完成）PC端：台湾卡录制的MP4文件：通过GMPullerX录制
  A：Windows端 => HTML5的video标签 => 可以正常播放
  B：Windows端 => videojs-swf => 可以正常播放，不用全部下载完毕。
  C：MacOS端   => HTML5的video标签 => 可以正常播放，不用全部下载完毕。
  D：MacOS端   => videojs-swf => 可以正常播放，但是要全部下载完毕。
3.（已完成）PC端：需要解决MP4录像回放的问题，定位问题所在，需要找到一个MP4有效分析工具。
  A：由于海康的rtsp通过frame传递过来了3种特殊帧(6,7[sps],8[pps])，都很短的数据帧。
  B：没有丢弃，直接存盘到mp4文件当中。
  C：对mp4用html5的video标签回放时报错，遇到错误的数据帧就报错。
  D：通过MPlayer播放器发现的，刚好在开头有3个连续的报错帧信息。
4.（已完成）Web端：对测试数据进行重新整理，修改gather.php的存盘处理过程。
5.（已完成）Web端：在播放页面，是根据record_id，向前向后找10个记录。
6.（已完成）Web端：在播放页面，播放完毕之后，自动播放下一个节目，这里用到的iframe.parent功能。
7.（已完成）Web端：在播放页面，完善了标题随着播放节目的变化而变化；导航栏针对下拉状态的处理；解决了点播数组合并的问题。
8.（已完成）Web端：在播放页面，记录点击播放次数。

2017.04.07
=========================================================================
2.（已完成）Web端：新增wk_teacher表，记录老师的名字、职称等等信息，便于前端显示。
   0(正高级教师) 1(高级教师) 2(一级教师) 3(二级教师) 4(三级教师)
3.（已完成）Web端：storage服务器上的nginx能够实现自动缩略图功能，需要重新编译配置nginx，--with-http_image_filter_module，格式 => http://xxx.jpg_120x120
4.（已完成）Web端：缩略图延时加载，jquery.lazyload.js，节省一次性访问占用的资源。

2017.03.24
=========================================================================
1.（已完成）Web端：搭建网站框架，呈现已经存放的数据记录。前端用bootstrap，后端用layui，移动端用weui
2.（已完成）Web端：网站分为前端和后端，前端呈现数据，后端控制和设置。
4.（已完成）Web端：网站前端首页的搭建 => 按科目排列 => 语文 | 数学 | 英语 => subject
5.（已完成）Web端：网站前端科目页面的搭建 => 按年级排列 => 小学 | 一年级 | 初中 | 高中 => grade，摄像头camera就是班级的别名。
   这里没有按照年级进行再次分类操作，主要是分页太复杂，后期可以考虑加入iframe的方式，进行分页操作。目前只是分了一种形式，加入了分页操作。
6.（已完成）Web端：网站前端点播播放页面的搭建；
   A:（已完成）播放列表页面，自动切换，动画显示，等等。
   B:（已完成）播放页面嵌入VideoJs，使用iframe嵌入播放列表页面，iframe调用固定的php页面，由php页面加载videojs的实际播放页面。
   C:（已完成）VideoJs-swf部分有问题，需要修改as代码，cuplayer是否专门修改过代码？(RTMPVideoProvider.as::onNetStreamStatus，需要处理NetStream.Video.DimensionChange通知。)
   D:（已完成）首页，右侧，最近更新，点击排行。
7.（已完成）Web端：网站前端直播首页页面的搭建；
8.（已完成）Web端：网站前端直播播放页面的搭建；
9.（已完成）Web端：网站在192.168.1.131，视频和数据库在192.168.1.180，网站和数据分开存放，效率高，也方便调试。需要注意删除 root@% 帐号，修改 config.inc.php 里的配置。

2017.03.17
=========================================================================
1.（已完成）PC端：Tracker地址与网站地址目前是一致的。
2.（已完成）PC端：采集端新增 最大设备数 配置（默认为16个摄像头）
3.（已完成）PC端：采集端启动后，需要先登录网站服务器，汇报采集端信息，然后，注册摄像头，最后，异步启动其它资源；
4.（已完成）PC端：组播线程在发现新摄像头时，需要判断最大设备数支持这个配置参数。
5.（已完成）PC端：修改摄像头名称之后，直接通知网站服务器，更新到数据库。
6.（已完成）数据库：将视频和图片分开存储，这样便于视频和截图关联，图片的缩略图可以用nginx的image_filter模块实现动态的缩略图。
   nginx动态缩略图的实现方法：http://www.w2bc.com/article/80424
7.（已完成）PC端：在生成视频之前，先截图，截图名称与视频名称一致，这样在上传到数据库时，能够进行匹配。
   GetSystemTimeAsFileTime()与md5()，双重处理，保证唯一性。
8.（已完成）PC端：FDFS自动重连还需要检测StorageSession的情况，只有当TrackerSession有效时，才需要检测StorageSession是否有效，有可能发生StorageSession意外中断的情况。
   注意：FDFS当中，无论是Tracker还是Storage，客户端连上之后，在一定时间内（30秒）不发送数据，FDFS就会中断，只要发送过一次数据，就会长久保持连接。
   PC端会每隔5秒钟检测Tracker和Storage连接是否有效，无效就会自动重连。
9.（已完成）PC端：新增Storage链接条件：录像目录下有数据才尝试链接，没有数据不链接，因为连上去了，由于没有数据也会被服务器断开。
10.（已完成）Web端：兼容上传的文件格式不是标准的形式，即：不带CameraID和时长的格式，同时，兼容文件名中有中文的情况。

2017.03.12
=========================================================================
1.（已完成）数据库：新增 School 数据表，记录学校信息，可以有多个PC采集端（Gather）
   school_id => int => 学校编号
   name => vchar => 学校名称
   addr => vchar => 学校地址
   phone => vchar => 学校电话
   image => vchar => 学校图标
   created => 创建时间
   updated => 更新时间

2.（已完成）数据库：新增 Gather 数据表，记录PC采集端信息，隶属于School，是后台手动指定的School；
   gather_id => int => PC采集端编号
   school_id => int => 学校编号（属于哪个学校，可以为0，即可以不设置，后台手动配置）
   mac_addr => vchar => 采集端MAC地址（唯一，不可改变）
   ip_addr => vchar => 采集端IP地址（可以变化，每次采集端启动时更新）
   max_camera => int => 采集端能处理最大设备数量（由采集端软件自己设定，每次采集端启动时更新，会引发carmea的归属变化操作，在camera注册时会进行检测）
   name_pc => vchar => 采集端名称（由PC端软件设定，每次采集端启动时更新，便于匹配哪个学校）
   created => 创建时间
   updated => 更新时间
   
3.（已完成）数据库：新增 Camera 数据表，记录摄像头设备信息（后续会牵涉班级表，课程表，学科表等等）
   camera_id => int => 摄像头设备编号
   gather_id => int => 摄像头所属的采集端编号（camera在启动注册或启动查询时，匹配device_sn，定位本记录，然后会检测gather记录的max_camera，然后决定是否更新gather_id，而不是删除camera记录）
   live_user => int => 摄像头直播用户数（小于或等于0，表示直播没启动，大于0，直播运行中）
   live_rate => int => 摄像头直播码流（Kbps）
   camera_login => int => 摄像头是否登录（0 offline，1 online），是否上传了rtmp地址不一定，需要查询gather对象。
   camera_type => int => 摄像头类型（1海康，2大华）
   camera_name => vchar => 摄像头名称（采集端设定）
   camera_rtmp => vchar => 摄像头上传的rtmp直播地址
   device_sn => vchar => 摄像头设备序列号，唯一标识
   device_ip => vchar => 摄像头设备IP地址
   device_mac => vchar => 摄像头设备MAC地址
   device_type => int => 摄像头设备类型

5.（已完成）Web端：在180(Tracker服务器)上，直接创建数据库和PHP执行目录；
6.（已完成）Web端：数据库密码Kuihua*#816

2017.03.01
=========================================================================
1.（已完成）PC端：加入自动尝试重连DVR功能，可设置开关；
2.（已完成）PC端：加入自动尝试重连FDFS功能，可设置开关；
3.（已完成）PC端：加入配置文件中可设置程序标题功能；
4.（放  弃）PC端：加入配置文件中可设置程序图标功能；
5.（已完成）PC端：加入配置文件中可设置联系信息功能；
6.（已完成）PC端：在每个监控窗口中加入显示当前状态的功能：录像中(动画)
7.（已完成）PC端：新增状态信息栏，实时更新上传码流，当前正在上传的文件，返回的结果，当前时间 等信息；
8.（已完成）PC端：新增左侧摄像头动画显示图标；
9.（已完成）PC端：新增通道配置 - 完善状态栏内容，响应每个按钮的处理事件。
10.（已完成）PC端：新增全局配置 - 完善状态栏内容，响应每个按钮的处理事件。
11.（已完成）PC端：新增关于 - 完善状态栏内容，响应每个按钮的处理事件。
12.（已完成）PC端：新增全屏 - 完善状态栏内容，响应每个按钮的处理事件。
13.（已完成）PC端：新增通道快速登录按钮 - 完善状态栏内容，响应每个按钮的处理事件。
14.（已完成）PC端：新增通道快速退出按钮 - 完善状态栏内容，响应每个按钮的处理事件。
16.（已完成）PC端：目前的录像切片方式，容易造成衔接处的数据丢失，是因为断开rtsp之后，再建立新的rtsp链接。
    需要改成：直接删除LibMP4录像对象，再创建新的LibMP4录像对象的方式。
    MP4录像时，音频是固定时间帧间隔，视频是两帧间的时间间隔。
    需要预先存储关键帧开始的视频数据，直到新的关键帧来到，丢掉前面存放的数据列表，继续存新的，音频帧存储时间戳大于或等于关键帧的数据。

2017.02.25
=========================================================================
1.（已完成）PC端：链接Tracker/Storage，上传.jpg/.mp4文件，网页端能够访问到。需要建立2个长链接，一个链接Tracker，接收指令，一个链接Storage上传数据。
   CTrackerSession => 链接Tracker，获取Storage的配置信息；
   CStorageSession => 链接Storage，发送上传指令，发送上传文件，接收反馈信息；
   CRemoteSession  => 链接命令中转服务器，获取微信或网站发出的远程操作指令。
2.（已完成）PC端：上传过程中，发生意外之后，自动再发起上传操作的处理。
3.（已完成）PC端：无需加入断点续传功能。（没有上传完毕的文件，fdfs-storage会自动(回滚)删除服务器端副本，下次再上传时重新上传。因此，目前的处理方式自动适配续传功能。）
   不需要记录当前正在上传的文件的位置，只需要删除已经上传的文件，即使上传意外中断，storage会自动删除副本，上传端重启后，会继续重新上传，就相当于断点续传一样的效果。
4.（已完成）PC端：（是由于每次发送的数据块太小造成的）发现fdfs在上传时最大码流只能达到4096Kbps，是否是配置问题？还是机器的网卡问题？
   发现每秒发送的频率都是64次/秒，因此，每次发生的数据越多，每秒发送的数据量就会越大，这时读取文件的时间基本可以忽略不计。
   每次读取  8KB字节，发送最高码流为  4Mbps，每秒发送64次 = 4*1024/8/8
   每次读取 64KB字节，发送最高码流为 32Mbps，每秒发送64次 = 32*1024/8/64
   每次读取128KB字节，发送最高码流为 64Mbps，每秒发送64次 = 64*1024/8/128

2017.02.14
=========================================================================
1.（已完成）PC端：开始进行云台操作，除了右侧的按钮操作以外（最好还能支持鼠标直接拖动画面移动云台。）
2.（已完成）PC端：自动验证主码流；用来生成截图和录像文件；自动验证子码流：用来直播观看；（只判断音视频压缩类型，不进行码流自动调整）
3.（已完成）PC端：每个DVR要事先登录网页管理器，配置主码流和子码流的压缩参数，我们的程序只是对音视频的压缩类型进行判断。音频必须是AAC，视频必须是H264。
4.（已完成）PC端：视频常规配置纠正：图像 => 视频调整 => 镜像 => 中心，OSD设置 => 显示名称 | 显示日期 => 名称，日期格式，显示矩形区，显示时间矫正。
5.（已完成）PC端：自动对主码流设置成1024Kbps（默认），子码流设置成512Kbps（默认）。
5.（已完成）PC端：开始进行抓图操作。存放路径问题，图片大小问题，图片上传问题。每隔一定秒数，轮询每个频道进行截图操作。
6.（已完成）PC端：开始进行录像操作。存放路径问题，mp4分片大小问题，视频上传问题。
7.（已完成）PC端：第一次配置时，寻找目前空间最大的盘符，创建一个xx:/GMSave目录，年月日时分秒_通道号.jpg 或 年月日时分秒_通道号.mp4，录像结束之前扩展名为.tmp
8.（已完成）PC端：录像结束之后，开始上传.mp4文件，上传结束之后，删除.mp4；无论mp4还是jpg，上传完毕之后，写入数据库，然后，立即删除。

2017.02.11
=========================================================================
1.（已完成）PC端：对右侧窗口中的按钮布局进行优化和调整，尽量减少具体数字的硬编码操作。
2.（已完成）PC端：进行右侧登录窗口的具体操作和实现；如果已经有了用户名和密码，自动登录，登录失败的处理。
3.（已完成）PC端：一个DVR设备，可能对应着多个通道，这个需要注意。
4.（已完成）PC端：登录状态记录到CCamera对象当中（甚至记录到xml当中，便于下次打开使用？日志文件已经有记录）
5.（已完成）PC端：用异步方式登录到DVR设备。
6.（已完成）PC端：自动连接DVR，自动播放，自动录像，自动截图，自动上传。
8.（放  弃）PC端：获取通道的实时回调预览数据，直接存盘成标准的MP4文件。（这种方式行不通，DVR回调数据是为了自己播放）还是用自己链接RTSP方式录像。

2017.01.25
=========================================================================
1.（已完成）PC端：右侧频道相关配置的界面 => 频道配置、云台操作、通道配置。
2.（已完成）PC端：所有监控核心功能：播放、截图、报警等等，都调用SDK完成，不要自己去实现。

2017.01.24
=========================================================================
1.（已完成）PC端：海康的IPC可以用SDK进行全部的远程配置，只需要知道IP和帐号之后，这样可以进行很多自动化的处理，比如：自动配置主码流/子码流，主码流录像和截图，子码流实时直播观看。
2.（已完成）PC端：海康的IPC提供的RTSP地址的自动探测，Live555有没有这个功能？只能自己用已知的规则去探测。
3.（已完成）PC端：海康的NVR能否提供RTSP的数据流，这样浩一的应用：实现PC/Android/iOS/微信跨平台管理，观看。同时，还能给企业/学校提供自己的私有云系统，快速方便的管理资源。
4.（已完成）PC端：录像下来的MP4文件的本地多路同时回放问题？海康录制的MP4不是标准的，因此，要自己录像。播放使用海康播放SDK，支持标准的MP4文件。
5.（已完成）PC端：在IPC当中可以调用“通道参数配置”这个接口，对IPC的各种通道进行配置，包括音视频码流、压缩方式等等，可以先探测有哪些通道Channel，在配置文件中需要在Camera下面加入新的节点Channel，来进行配置的存放和处理。

2017.01.18
=========================================================================
1.（已完成）PC端：需要建立一个摄像机管理类，专门存放网络摄像机相关操作，目前支持两种类型：海康和大华。
2.（已完成）PC端：统一名称：监控通道，或者可以修改。配置文件当中监控通道（摄像头）使用DeviceSN做为跟节点。
   先从配置文件读取监控通道，再从网络获取实际活跃的监控通道，始终用一个配置文件（Config.xml，UTF8），监控通道Track。
   通道对象管理顺序：CMidView => CVideoWnd => CRenderWnd => CCamera ，所有的配置只存放在一个对象中，不要在多个对象中存放配置，更新复杂。
<?xml version="1.0" encoding="UTF-8" ?>
<Config>
  <Common>
  </Common>
  <Track>
    <Camera>
      <ID>1</ID>
      <Name>监控通道 - 1</Name>
      <DeviceType></DeviceType>
      <DeviceDescription></DeviceDescription>
      <DeviceSN></DeviceSN>
      <CommandPort></CommandPort>
      <HttpPort></HttpPort>
      <MAC></MAC>
      <IPv4Address></IPv4Address>
      <BootTime><BootTime>
      <UserName></UserName>
      <PassWord></PassWord>
      <Channel>
      </Channel>
    </Camera>
  <Track/>
</Config>

2017.01.11
=========================================================================
1.（已完成）PC端：追加线程、追加网络、追加组播（自动搜索）、追加xml配置。
2.（已完成）PC端：海康网络摄像机：录像模块有问题，需要自己链接rtsp并录像，
   需要自己搜索配置摄像机，需要用到的SDK：回放模块、抓图模块、云台控制、报警模块。
3.（已完成）PC端：摄像头设置子码率，设置很低256Kbps~500Kbps之间，用来做rtsp协议转发，
   专门看直播，是受到手机控制，手机发送指令，然后PC端才上传，手机直接用hls观看，hls需要解决快显和延时问题。

2017.01.10
=========================================================================
1.（已完成）新买手机卡
2.（已完成）新建阿里云帐号
3.（未完成）新建公众号
4.（未完成）新建小程序帐号
