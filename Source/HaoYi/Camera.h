
#pragma once

#include "HCNetSDK.h"

class CRtspRecThread;
class CPushThread;
class CVideoWnd;
class CCamera
{
public:
	CCamera(CVideoWnd * lpWndParent);
	~CCamera(void);
public:
	string   &  GetDeviceSN() { return m_strDeviceSN; }
	CString  &	GetLogStatus() { return m_strLogStatus; }
	CVideoWnd * GetVideoWnd() { return m_lpVideoWnd; }
public:
	BOOL		IsLogin();		// 这个状态只能用于显示，不能用于状态判断...
	BOOL		IsPlaying();	// 这个可以用于状态的精确判断...
	BOOL		IsRecording();	// 通道是否正处在录像中...
	BOOL		IsPublishing(); // 通道是否正处在发布中...
	BOOL		IsDeviceStatus();
	BOOL		IsCameraDevice() { return ((m_nStreamProp == kStreamDevice) ? true : false); }
	CString  &  GetDevicePullUrl() { return (m_bIsTwiceMode ? m_strRtspSubUrl : m_strRtspMainUrl); }
	int			GetRecCourseID() { return m_nRecCourseID; }
	DWORD		GetHKErrCode() { return m_dwHKErrCode; }
	STREAM_PROP	GetStreamProp() { return m_nStreamProp; }
	int			GetDBCameraID() { return m_nDBCameraID; }
	int			GetRecvPullKbps();
	int			GetSendPushKbps();
	LPCTSTR		GetStreamPushUrl();

	BOOL		InitCamera(GM_MapData & inMapWeb);
	void		UpdateWndTitle(STREAM_PROP inPropType, CString & strTitle);

	GM_Error	doStreamLogin();
	GM_Error	doStreamLogout();
	int			doStreamStartLivePush(string & strRtmpUrl);
	void		doStreamStopLivePush();
	void		doStreamStatus(LPCTSTR lpszStatus);

	DWORD		doDevicePTZCmd(DWORD dwPTZCmd, BOOL bStop);
	DWORD		doDeviceLogin(HWND hWndNotify, LPCTSTR lpIPAddr, int nCmdPort, LPCTSTR lpUser, LPCTSTR lpPass);
	void		doDeviceLogout();

	void		onDeviceException(DWORD dwType, LONG lUserID, LONG lHandle);
	void		onDeviceLoginAsync(LONG lUserID, DWORD dwResult, LPNET_DVR_DEVICEINFO_V30 lpDeviceInfo);
	DWORD		onDeviceLoginSuccess();

	void		doRecStartCourse(int nCourseID);
	void		doRecStopCourse(int nCourseID);

	void		doPostStopLiveMsg();
	void		doDeletePushThread();

	void		doWebStatCamera(int nStatus, int nErrCode = 0, LPCTSTR lpszErrMsg = NULL);
private:
	static void CALLBACK DeviceLoginResult(LONG lUserID, DWORD dwResult, LPNET_DVR_DEVICEINFO_V30 lpDeviceInfo, void * pUser);
	static void CALLBACK DeviceException(DWORD dwType, LONG lUserID, LONG lHandle, void * pUser);
private:
	void		WaitForExit();						// 等待异步登录退出...
	void		ClearResource();					// 释放建立资源...
	BOOL		DeviceStartMainRec();				// 开启主码流录像...
	BOOL		DeviceStopMainRec();				// 关闭主码流录像...
private:
	//GM_MapData			m_MapNetConfig;			// 摄像头网络配置信息...
	BOOL					m_bStreamLogin;			// 流转发模式下正在异步登录标志...
	STREAM_PROP				m_nStreamProp;			// 通道流类型...
	int						m_nDBCameraID;			// 通道数据库编号...
	HWND					m_hWndRight;			// 消息通知窗口...
	string					m_strDeviceSN;			// 本地摄像头序列号...
	CAMERA_TYPE				m_nCameraType;			// 网络摄像头类型...
	CVideoWnd		*		m_lpVideoWnd;			// 父窗口对象...
	CString					m_strLogStatus;			// 登录状态栏...

	int						m_nRecCourseID;			// 正在录像的课程编号...

	CRtspRecThread  *		m_lpDeviceMainRec;		// 双流模式下的主码流录像...
	CPushThread     *		m_lpPushThread;			// 直播上传线程...

	BOOL					m_bIsUsingTCP;			// 摄像头模式下的TCP开关...
	BOOL					m_bIsTwiceMode;			// 双流模式标志...
	CString					m_strRtspMainUrl;		// 主码流rtsp地址...
	CString					m_strRtspSubUrl;		// 子码流rtsp地址...
	CString					m_strLoginUser;			// 记录登录用户名称...
	CString					m_strLoginPass;			// 记录登陆用户密码...
	int						m_nRtspPort;			// IPC的RTSP端口号...

	LONG					m_dwHKErrCode;			// 记录海康错误码...
	BOOL					m_bIsExiting;			// 正在等待退出中...
	BOOL					m_HKLoginIng;			// 正在异步登录中...
	LONG					m_HKPlayID;				// 实时播放编号...
	LONG					m_HKLoginID;			// 海康登录编号...
	NET_DVR_DEVICEINFO_V30	m_HKDeviceInfo;			// 海康设备信息...
};
