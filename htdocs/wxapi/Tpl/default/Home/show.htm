<html lang="zh-CN">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="/wxapi/public/css/video-js.css" rel="stylesheet" type="text/css" />
  <!-- If you'd like to support IE8 -->
  <script src='/wxapi/public/js/videojs-ie8.min.js'></script>
</head>
<body style="margin: 1px 1px;">
  <div>
    <video id="my-video" class="video-js vjs-default-skin vjs-big-play-centered" controls preload="auto" data-setup="{}">
      <!--<source src="http://192.168.1.131/263232.mp4" type="video/mp4"></source>-->
      <!--<source src="rtmp://192.168.1.131:1935/live/live1" type="rtmp/flv"></source>-->
      <!--<source src="http://192.168.1.180:8080/live/live1.m3u8" type="application/x-mpegURL"></source>-->
      <p class="vjs-no-js">要播放该视频请开启 JavaScript ，并升级浏览器<a href="http://videojs.com/html5-video-support/" target="_blank">支持 HTML5 视频</a></p>
    </video>
  </div>
  <!-- PC端还是使用videojs的5.18.4，为了兼容IE8界面 -->
  <script src="/wxapi/public/js/jquery-1.12.4.min.js"></script>
  <script src="/wxapi/public/js/video.min.js"></script>
  <script src="/wxapi/public/js/videojs-contrib-hls.min.js"></script>
  <script src="/wxapi/public/js/zh-CN.js"></script>
  <script type="text/javascript">
    // 获取网站地址...
    var g_siteurl = "{{:__APP__}}";
    // 初始化直播通知需要的变量...
    // g_player_id     => 大于0的编号...
    // g_player_vod    => 0(直播), 1(点播)...
    // g_player_type   => 0(Flash), 1(HTML5)...
    // g_player_camera => 通道编号 => rtmp_live
    // g_player_active => 0(停止), 1(有效)...
    var g_player_id = {{$my_show.player_id}};
    var g_player_vod = {{$my_show.player_vod}};
    var g_player_camera = {{$my_show.player_camera}};
    var g_player_type = 0;
    var g_player_clock = -1;
    // 直接修改父窗口的点击播放次数 => 点播和直播的处理不相同，需要区分一下...
    window.parent.doClicks('{{$my_show.click_id}}', {{$my_show.clicks}}, g_player_vod);
    // 直播状态通知接口 => inPlayActive不能用true或false，必须用1或0...
    function doLivePlayVerify(inCamera, inPlayID, inPlayType, inPlayActive) {
      // 通过ajax发送异步消息命令给转发服务器...
      $.ajax({
        type: "post",
        async: true,
        url: g_siteurl+"/RTMP/verify",
        data: {rtmp_live: inCamera, player_id: inPlayID, player_type: inPlayType, player_active: inPlayActive},
        success: function(ajaxData) {
          // 解析反馈的json数据内容...
          var arrJson = $.parseJSON(ajaxData);
          // 打印错误信息，关闭定时器...
          if( arrJson.err_code > 0 ) {
            console.log('verify error => ' + arrJson.err_msg);
            clearInterval(g_player_clock);
            return;
          }
          // 打印成功信息...
          console.log('verify success => player_camera: %d, player_id: %d, player_type: %d, player_active: %d', inCamera, inPlayID, inPlayType, inPlayActive);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
          console.log('verify error => ' + textStatus+': '+XMLHttpRequest.status+','+errorThrown);
          clearInterval(g_player_clock);
        }
      });
    }
    // 初始化videojs对象 => 直接设置多个源，让videojs自动匹配...
    var player = videojs("my-video", {
      width: "{{$my_show.width}}",
      height: "{{$my_show.height}}",
      sources: [{
        type: "{{$my_show.type}}",
        src: "{{$my_show.url}}"
      }, {
        type: "{{$my_show.hls_type}}",
        src: "{{$my_show.hls_url}}"
      }],
      controlBar: {
        currentTimeDisplay: true,
        audioTrackButton: false
      },
      techOrder: ['{{$my_show.order1}}', '{{$my_show.order2}}'],
      flash: { swf: "/wxapi/public/js/video-js.swf" },
      html5: { hls: {withCredentials: false} }
    });
    // 播放器ready事件...
    player.ready( function() {
      // 注册结束事件，调用父窗口的接口...
      this.on('ended', function() {
        window.parent.doEndedEvent();
      });
      // 获取播放器编号，播放器类型，是否有效...
      g_player_type = ((this.techName_.toLowerCase() == 'flash') ? 0 : 1);
      // 如果是点播，直接播放返回...
      if( g_player_vod ) {
        this.play();
        return;
      }
      // 如果是直播的处理过程...
      // g_player_type => 0 => flash player...
      // g_player_type => 1 => html5 player...
      if( g_player_type > 0 ) {
        // 如果是html5播放器，设置超时汇报事件，每隔12秒调用父窗口的ajax通知接口...
        g_player_clock = setInterval(function() {
          doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 1);
        }, 12000);
        // 设置窗口关闭事件，通知中转服务器，播放器关闭...
        window.onunload = function() {
          clearInterval(g_player_clock);
          doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 0);
        };
      } else {
        // 如果是flash播放器，直接调用父窗口的ajax通知接口...
        doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 1);
      }
      // 然后，直接播放...
      this.play();
    });
    // 播放器播放错误...
    player.on('error', function() {
      // 打印错误信息...
      console.log('player Error!')
      // 如果是hls直播，关闭定时器，并通知中转服务器...
      if( g_player_vod <= 0 && g_player_type > 0 ) {
        clearInterval(g_player_clock);
        doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 0);
      }
    });
    // 播放器播放结束...
    player.on('ended', function() {
      // 打印结束信息...
      console.log('player ended!')
      // 如果是html5直播，关闭定时器，并通知中转服务器...
      if( g_player_vod <= 0 && g_player_type > 0 ) {
        clearInterval(g_player_clock);
        doLivePlayVerify(g_player_camera, g_player_id, g_player_type, 0);
      }
    });
    // 播放器确认能够播放...
    player.on('canplay', function() {
      console.log('player Canplay!')
    });
    // 播放器无需停顿直接播放...
    player.on('canplaythrough', function() {
      console.log('player Canplaythrough!')
    });
  </script>
</body>
</html>